/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var user_pb = require('./user_pb.js');
var commit_user_pb = require('./commit_user_pb.js');
var repository_pb = require('./repository_pb.js');
goog.exportSymbol('proto.github.StatusCommitBranch', null, global);
goog.exportSymbol('proto.github.StatusCommitDetail', null, global);
goog.exportSymbol('proto.github.StatusCommitDetailTree', null, global);
goog.exportSymbol('proto.github.StatusCommitUpdate', null, global);
goog.exportSymbol('proto.github.StatusEvent', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.StatusCommitDetailTree = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.StatusCommitDetailTree, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.StatusCommitDetailTree.displayName = 'proto.github.StatusCommitDetailTree';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.StatusCommitDetailTree.prototype.toObject = function(opt_includeInstance) {
  return proto.github.StatusCommitDetailTree.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.StatusCommitDetailTree} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.StatusCommitDetailTree.toObject = function(includeInstance, msg) {
  var f, obj = {
    sha: jspb.Message.getFieldWithDefault(msg, 1, ""),
    url: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.StatusCommitDetailTree}
 */
proto.github.StatusCommitDetailTree.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.StatusCommitDetailTree;
  return proto.github.StatusCommitDetailTree.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.StatusCommitDetailTree} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.StatusCommitDetailTree}
 */
proto.github.StatusCommitDetailTree.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSha(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.StatusCommitDetailTree} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.StatusCommitDetailTree.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.StatusCommitDetailTree.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.StatusCommitDetailTree.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSha();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string sha = 1;
 * @return {string}
 */
proto.github.StatusCommitDetailTree.prototype.getSha = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.StatusCommitDetailTree.prototype.setSha = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.github.StatusCommitDetailTree.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.StatusCommitDetailTree.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.StatusCommitBranch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.StatusCommitBranch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.StatusCommitBranch.displayName = 'proto.github.StatusCommitBranch';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.StatusCommitBranch.prototype.toObject = function(opt_includeInstance) {
  return proto.github.StatusCommitBranch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.StatusCommitBranch} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.StatusCommitBranch.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commit: (f = msg.getCommit()) && proto.github.StatusCommitDetailTree.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.StatusCommitBranch}
 */
proto.github.StatusCommitBranch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.StatusCommitBranch;
  return proto.github.StatusCommitBranch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.StatusCommitBranch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.StatusCommitBranch}
 */
proto.github.StatusCommitBranch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.github.StatusCommitDetailTree;
      reader.readMessage(value,proto.github.StatusCommitDetailTree.deserializeBinaryFromReader);
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.StatusCommitBranch} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.StatusCommitBranch.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.StatusCommitBranch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.StatusCommitBranch.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getCommit();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.github.StatusCommitDetailTree.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.github.StatusCommitBranch.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.StatusCommitBranch.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional StatusCommitDetailTree commit = 2;
 * @return {?proto.github.StatusCommitDetailTree}
 */
proto.github.StatusCommitBranch.prototype.getCommit = function() {
  return /** @type{?proto.github.StatusCommitDetailTree} */ (
    jspb.Message.getWrapperField(this, proto.github.StatusCommitDetailTree, 2));
};


/** @param {?proto.github.StatusCommitDetailTree|undefined} value */
proto.github.StatusCommitBranch.prototype.setCommit = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.github.StatusCommitBranch.prototype.clearCommit = function() {
  this.setCommit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.StatusCommitBranch.prototype.hasCommit = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.StatusCommitDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.StatusCommitDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.StatusCommitDetail.displayName = 'proto.github.StatusCommitDetail';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.StatusCommitDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.github.StatusCommitDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.StatusCommitDetail} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.StatusCommitDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    author: (f = msg.getAuthor()) && commit_user_pb.CommitUser.toObject(includeInstance, f),
    committer: (f = msg.getCommitter()) && commit_user_pb.CommitUser.toObject(includeInstance, f),
    message: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tree: (f = msg.getTree()) && proto.github.StatusCommitDetailTree.toObject(includeInstance, f),
    url: jspb.Message.getFieldWithDefault(msg, 5, ""),
    commentCount: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.StatusCommitDetail}
 */
proto.github.StatusCommitDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.StatusCommitDetail;
  return proto.github.StatusCommitDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.StatusCommitDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.StatusCommitDetail}
 */
proto.github.StatusCommitDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new commit_user_pb.CommitUser;
      reader.readMessage(value,commit_user_pb.CommitUser.deserializeBinaryFromReader);
      msg.setAuthor(value);
      break;
    case 2:
      var value = new commit_user_pb.CommitUser;
      reader.readMessage(value,commit_user_pb.CommitUser.deserializeBinaryFromReader);
      msg.setCommitter(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = new proto.github.StatusCommitDetailTree;
      reader.readMessage(value,proto.github.StatusCommitDetailTree.deserializeBinaryFromReader);
      msg.setTree(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommentCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.StatusCommitDetail} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.StatusCommitDetail.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.StatusCommitDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.StatusCommitDetail.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAuthor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      commit_user_pb.CommitUser.serializeBinaryToWriter
    );
  }
  f = this.getCommitter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      commit_user_pb.CommitUser.serializeBinaryToWriter
    );
  }
  f = this.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getTree();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.github.StatusCommitDetailTree.serializeBinaryToWriter
    );
  }
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getCommentCount();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional CommitUser author = 1;
 * @return {?proto.github.CommitUser}
 */
proto.github.StatusCommitDetail.prototype.getAuthor = function() {
  return /** @type{?proto.github.CommitUser} */ (
    jspb.Message.getWrapperField(this, commit_user_pb.CommitUser, 1));
};


/** @param {?proto.github.CommitUser|undefined} value */
proto.github.StatusCommitDetail.prototype.setAuthor = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.github.StatusCommitDetail.prototype.clearAuthor = function() {
  this.setAuthor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.StatusCommitDetail.prototype.hasAuthor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CommitUser committer = 2;
 * @return {?proto.github.CommitUser}
 */
proto.github.StatusCommitDetail.prototype.getCommitter = function() {
  return /** @type{?proto.github.CommitUser} */ (
    jspb.Message.getWrapperField(this, commit_user_pb.CommitUser, 2));
};


/** @param {?proto.github.CommitUser|undefined} value */
proto.github.StatusCommitDetail.prototype.setCommitter = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.github.StatusCommitDetail.prototype.clearCommitter = function() {
  this.setCommitter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.StatusCommitDetail.prototype.hasCommitter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.github.StatusCommitDetail.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.github.StatusCommitDetail.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional StatusCommitDetailTree tree = 4;
 * @return {?proto.github.StatusCommitDetailTree}
 */
proto.github.StatusCommitDetail.prototype.getTree = function() {
  return /** @type{?proto.github.StatusCommitDetailTree} */ (
    jspb.Message.getWrapperField(this, proto.github.StatusCommitDetailTree, 4));
};


/** @param {?proto.github.StatusCommitDetailTree|undefined} value */
proto.github.StatusCommitDetail.prototype.setTree = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.github.StatusCommitDetail.prototype.clearTree = function() {
  this.setTree(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.StatusCommitDetail.prototype.hasTree = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string url = 5;
 * @return {string}
 */
proto.github.StatusCommitDetail.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.github.StatusCommitDetail.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 comment_count = 6;
 * @return {number}
 */
proto.github.StatusCommitDetail.prototype.getCommentCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.github.StatusCommitDetail.prototype.setCommentCount = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.StatusCommitUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.StatusCommitUpdate.repeatedFields_, null);
};
goog.inherits(proto.github.StatusCommitUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.StatusCommitUpdate.displayName = 'proto.github.StatusCommitUpdate';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.StatusCommitUpdate.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.StatusCommitUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.github.StatusCommitUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.StatusCommitUpdate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.StatusCommitUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    sha: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commit: (f = msg.getCommit()) && proto.github.StatusCommitDetail.toObject(includeInstance, f),
    url: jspb.Message.getFieldWithDefault(msg, 3, ""),
    htmlUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    commentsUrl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    author: (f = msg.getAuthor()) && user_pb.User.toObject(includeInstance, f),
    committer: (f = msg.getCommitter()) && user_pb.User.toObject(includeInstance, f),
    parentsList: jspb.Message.toObjectList(msg.getParentsList(),
    proto.github.StatusCommitDetailTree.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.StatusCommitUpdate}
 */
proto.github.StatusCommitUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.StatusCommitUpdate;
  return proto.github.StatusCommitUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.StatusCommitUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.StatusCommitUpdate}
 */
proto.github.StatusCommitUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSha(value);
      break;
    case 2:
      var value = new proto.github.StatusCommitDetail;
      reader.readMessage(value,proto.github.StatusCommitDetail.deserializeBinaryFromReader);
      msg.setCommit(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtmlUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommentsUrl(value);
      break;
    case 6:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setAuthor(value);
      break;
    case 7:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setCommitter(value);
      break;
    case 8:
      var value = new proto.github.StatusCommitDetailTree;
      reader.readMessage(value,proto.github.StatusCommitDetailTree.deserializeBinaryFromReader);
      msg.addParents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.StatusCommitUpdate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.StatusCommitUpdate.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.StatusCommitUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.StatusCommitUpdate.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSha();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getCommit();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.github.StatusCommitDetail.serializeBinaryToWriter
    );
  }
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getHtmlUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getCommentsUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getAuthor();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = this.getCommitter();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = this.getParentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.github.StatusCommitDetailTree.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sha = 1;
 * @return {string}
 */
proto.github.StatusCommitUpdate.prototype.getSha = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.StatusCommitUpdate.prototype.setSha = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional StatusCommitDetail commit = 2;
 * @return {?proto.github.StatusCommitDetail}
 */
proto.github.StatusCommitUpdate.prototype.getCommit = function() {
  return /** @type{?proto.github.StatusCommitDetail} */ (
    jspb.Message.getWrapperField(this, proto.github.StatusCommitDetail, 2));
};


/** @param {?proto.github.StatusCommitDetail|undefined} value */
proto.github.StatusCommitUpdate.prototype.setCommit = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.github.StatusCommitUpdate.prototype.clearCommit = function() {
  this.setCommit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.StatusCommitUpdate.prototype.hasCommit = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string url = 3;
 * @return {string}
 */
proto.github.StatusCommitUpdate.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.github.StatusCommitUpdate.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string html_url = 4;
 * @return {string}
 */
proto.github.StatusCommitUpdate.prototype.getHtmlUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.github.StatusCommitUpdate.prototype.setHtmlUrl = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string comments_url = 5;
 * @return {string}
 */
proto.github.StatusCommitUpdate.prototype.getCommentsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.github.StatusCommitUpdate.prototype.setCommentsUrl = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional User author = 6;
 * @return {?proto.github.User}
 */
proto.github.StatusCommitUpdate.prototype.getAuthor = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 6));
};


/** @param {?proto.github.User|undefined} value */
proto.github.StatusCommitUpdate.prototype.setAuthor = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.github.StatusCommitUpdate.prototype.clearAuthor = function() {
  this.setAuthor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.StatusCommitUpdate.prototype.hasAuthor = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional User committer = 7;
 * @return {?proto.github.User}
 */
proto.github.StatusCommitUpdate.prototype.getCommitter = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 7));
};


/** @param {?proto.github.User|undefined} value */
proto.github.StatusCommitUpdate.prototype.setCommitter = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.github.StatusCommitUpdate.prototype.clearCommitter = function() {
  this.setCommitter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.StatusCommitUpdate.prototype.hasCommitter = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated StatusCommitDetailTree parents = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.github.StatusCommitDetailTree>}
 */
proto.github.StatusCommitUpdate.prototype.getParentsList = function() {
  return /** @type{!Array.<!proto.github.StatusCommitDetailTree>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.StatusCommitDetailTree, 8));
};


/** @param {!Array.<!proto.github.StatusCommitDetailTree>} value */
proto.github.StatusCommitUpdate.prototype.setParentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.github.StatusCommitDetailTree=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.StatusCommitDetailTree}
 */
proto.github.StatusCommitUpdate.prototype.addParents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.github.StatusCommitDetailTree, opt_index);
};


proto.github.StatusCommitUpdate.prototype.clearParentsList = function() {
  this.setParentsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.StatusEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.StatusEvent.repeatedFields_, null);
};
goog.inherits(proto.github.StatusEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.StatusEvent.displayName = 'proto.github.StatusEvent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.StatusEvent.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.StatusEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.github.StatusEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.StatusEvent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.StatusEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sha: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    targetUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    context: jspb.Message.getFieldWithDefault(msg, 5, ""),
    description: jspb.Message.getFieldWithDefault(msg, 6, ""),
    state: jspb.Message.getFieldWithDefault(msg, 7, ""),
    commit: (f = msg.getCommit()) && proto.github.StatusCommitUpdate.toObject(includeInstance, f),
    branchesList: jspb.Message.toObjectList(msg.getBranchesList(),
    proto.github.StatusCommitBranch.toObject, includeInstance),
    createdAt: jspb.Message.getFieldWithDefault(msg, 10, ""),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 11, ""),
    repository: (f = msg.getRepository()) && repository_pb.Repository.toObject(includeInstance, f),
    sender: (f = msg.getSender()) && user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.StatusEvent}
 */
proto.github.StatusEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.StatusEvent;
  return proto.github.StatusEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.StatusEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.StatusEvent}
 */
proto.github.StatusEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSha(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContext(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 8:
      var value = new proto.github.StatusCommitUpdate;
      reader.readMessage(value,proto.github.StatusCommitUpdate.deserializeBinaryFromReader);
      msg.setCommit(value);
      break;
    case 9:
      var value = new proto.github.StatusCommitBranch;
      reader.readMessage(value,proto.github.StatusCommitBranch.deserializeBinaryFromReader);
      msg.addBranches(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedAt(value);
      break;
    case 12:
      var value = new repository_pb.Repository;
      reader.readMessage(value,repository_pb.Repository.deserializeBinaryFromReader);
      msg.setRepository(value);
      break;
    case 13:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.StatusEvent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.StatusEvent.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.StatusEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.StatusEvent.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getSha();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getTargetUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getContext();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getState();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getCommit();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.github.StatusCommitUpdate.serializeBinaryToWriter
    );
  }
  f = this.getBranchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.github.StatusCommitBranch.serializeBinaryToWriter
    );
  }
  f = this.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getUpdatedAt();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getRepository();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      repository_pb.Repository.serializeBinaryToWriter
    );
  }
  f = this.getSender();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.github.StatusEvent.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.github.StatusEvent.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string sha = 2;
 * @return {string}
 */
proto.github.StatusEvent.prototype.getSha = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.StatusEvent.prototype.setSha = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.github.StatusEvent.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.github.StatusEvent.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string target_url = 4;
 * @return {string}
 */
proto.github.StatusEvent.prototype.getTargetUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.github.StatusEvent.prototype.setTargetUrl = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string context = 5;
 * @return {string}
 */
proto.github.StatusEvent.prototype.getContext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.github.StatusEvent.prototype.setContext = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.github.StatusEvent.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.github.StatusEvent.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string state = 7;
 * @return {string}
 */
proto.github.StatusEvent.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.github.StatusEvent.prototype.setState = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional StatusCommitUpdate commit = 8;
 * @return {?proto.github.StatusCommitUpdate}
 */
proto.github.StatusEvent.prototype.getCommit = function() {
  return /** @type{?proto.github.StatusCommitUpdate} */ (
    jspb.Message.getWrapperField(this, proto.github.StatusCommitUpdate, 8));
};


/** @param {?proto.github.StatusCommitUpdate|undefined} value */
proto.github.StatusEvent.prototype.setCommit = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.github.StatusEvent.prototype.clearCommit = function() {
  this.setCommit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.StatusEvent.prototype.hasCommit = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated StatusCommitBranch branches = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.github.StatusCommitBranch>}
 */
proto.github.StatusEvent.prototype.getBranchesList = function() {
  return /** @type{!Array.<!proto.github.StatusCommitBranch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.StatusCommitBranch, 9));
};


/** @param {!Array.<!proto.github.StatusCommitBranch>} value */
proto.github.StatusEvent.prototype.setBranchesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.github.StatusCommitBranch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.StatusCommitBranch}
 */
proto.github.StatusEvent.prototype.addBranches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.github.StatusCommitBranch, opt_index);
};


proto.github.StatusEvent.prototype.clearBranchesList = function() {
  this.setBranchesList([]);
};


/**
 * optional string created_at = 10;
 * @return {string}
 */
proto.github.StatusEvent.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.github.StatusEvent.prototype.setCreatedAt = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string updated_at = 11;
 * @return {string}
 */
proto.github.StatusEvent.prototype.getUpdatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.github.StatusEvent.prototype.setUpdatedAt = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional Repository repository = 12;
 * @return {?proto.github.Repository}
 */
proto.github.StatusEvent.prototype.getRepository = function() {
  return /** @type{?proto.github.Repository} */ (
    jspb.Message.getWrapperField(this, repository_pb.Repository, 12));
};


/** @param {?proto.github.Repository|undefined} value */
proto.github.StatusEvent.prototype.setRepository = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.github.StatusEvent.prototype.clearRepository = function() {
  this.setRepository(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.StatusEvent.prototype.hasRepository = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional User sender = 13;
 * @return {?proto.github.User}
 */
proto.github.StatusEvent.prototype.getSender = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 13));
};


/** @param {?proto.github.User|undefined} value */
proto.github.StatusEvent.prototype.setSender = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.github.StatusEvent.prototype.clearSender = function() {
  this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.StatusEvent.prototype.hasSender = function() {
  return jspb.Message.getField(this, 13) != null;
};


goog.object.extend(exports, proto.github);


// patched by github-protobuf to add toJSON and fromJSON methods

function _toBool (obj) {
	if (typeof(obj) === 'boolean') { return obj; }
	if (typeof(obj) === 'string') { return obj === 'true'; }
	if (typeof(obj) === 'number') { return obj > 0; }
	return false;
};



// .github.StatusCommitDetail
proto.github.StatusCommitDetail.prototype.fromJSON = function(obj) {
	if ('author' in obj) {
		var CommitUser = require('./commit_user_pb.js').CommitUser;
		var CommitUserInstance = new CommitUser();
		this.setAuthor(CommitUserInstance.fromJSON(obj.author));
	}
	if ('committer' in obj) {
		var CommitUser = require('./commit_user_pb.js').CommitUser;
		var CommitUserInstance = new CommitUser();
		this.setCommitter(CommitUserInstance.fromJSON(obj.committer));
	}
	'message' in obj && this.setMessage(obj.message);
	if ('tree' in obj) {
		var StatusCommitDetailTree = require('./status_event_pb.js').StatusCommitDetailTree;
		var StatusCommitDetailTreeInstance = new StatusCommitDetailTree();
		this.setTree(StatusCommitDetailTreeInstance.fromJSON(obj.tree));
	}
	'url' in obj && this.setUrl(obj.url);
	'comment_count' in obj && this.setCommentCount(+obj.comment_count);
	return this;
};

proto.github.StatusCommitDetail.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('author' in obj) {
		obj.author = this.getAuthor().toJSON();
	}
	if ('committer' in obj) {
		obj.committer = this.getCommitter().toJSON();
	}
	if ('message' in obj) {
		obj.message = obj.message;
		delete obj.message;
	}
	if ('tree' in obj) {
		obj.tree = this.getTree().toJSON();
	}
	if ('url' in obj) {
		obj.url = obj.url;
		delete obj.url;
	}
	if ('commentCount' in obj) {
		obj.comment_count = obj.commentCount;
		delete obj.commentCount;
	}
	return obj;
};



// .github.StatusCommitUpdate
proto.github.StatusCommitUpdate.prototype.fromJSON = function(obj) {
	'sha' in obj && this.setSha(obj.sha);
	if ('commit' in obj) {
		var StatusCommitDetail = require('./status_event_pb.js').StatusCommitDetail;
		var StatusCommitDetailInstance = new StatusCommitDetail();
		this.setCommit(StatusCommitDetailInstance.fromJSON(obj.commit));
	}
	'url' in obj && this.setUrl(obj.url);
	'html_url' in obj && this.setHtmlUrl(obj.html_url);
	'comments_url' in obj && this.setCommentsUrl(obj.comments_url);
	if ('author' in obj) {
		var User = require('./user_pb.js').User;
		var UserInstance = new User();
		this.setAuthor(UserInstance.fromJSON(obj.author));
	}
	if ('committer' in obj) {
		var User = require('./user_pb.js').User;
		var UserInstance = new User();
		this.setCommitter(UserInstance.fromJSON(obj.committer));
	}
	if ('parents' in obj) {
		var StatusCommitDetailTree = require('./status_event_pb.js').StatusCommitDetailTree;
		var StatusCommitDetailTreeInstance = new StatusCommitDetailTree();
		this.setParents(StatusCommitDetailTreeInstance.fromJSON(obj.parents));
	}
	return this;
};

proto.github.StatusCommitUpdate.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('sha' in obj) {
		obj.sha = obj.sha;
		delete obj.sha;
	}
	if ('commit' in obj) {
		obj.commit = this.getCommit().toJSON();
	}
	if ('url' in obj) {
		obj.url = obj.url;
		delete obj.url;
	}
	if ('htmlUrl' in obj) {
		obj.html_url = obj.htmlUrl;
		delete obj.htmlUrl;
	}
	if ('commentsUrl' in obj) {
		obj.comments_url = obj.commentsUrl;
		delete obj.commentsUrl;
	}
	if ('author' in obj) {
		obj.author = this.getAuthor().toJSON();
	}
	if ('committer' in obj) {
		obj.committer = this.getCommitter().toJSON();
	}
	if ('parents' in obj) {
		obj.parents = this.getParents().toJSON();
	}
	return obj;
};



// .github.StatusCommitDetailTree
proto.github.StatusCommitDetailTree.prototype.fromJSON = function(obj) {
	'sha' in obj && this.setSha(obj.sha);
	'url' in obj && this.setUrl(obj.url);
	return this;
};

proto.github.StatusCommitDetailTree.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('sha' in obj) {
		obj.sha = obj.sha;
		delete obj.sha;
	}
	if ('url' in obj) {
		obj.url = obj.url;
		delete obj.url;
	}
	return obj;
};



// .github.StatusEvent
proto.github.StatusEvent.prototype.fromJSON = function(obj) {
	'id' in obj && this.setId(+obj.id);
	'sha' in obj && this.setSha(obj.sha);
	'name' in obj && this.setName(obj.name);
	'target_url' in obj && this.setTargetUrl(obj.target_url);
	'context' in obj && this.setContext(obj.context);
	'description' in obj && this.setDescription(obj.description);
	'state' in obj && this.setState(obj.state);
	if ('commit' in obj) {
		var StatusCommitUpdate = require('./status_event_pb.js').StatusCommitUpdate;
		var StatusCommitUpdateInstance = new StatusCommitUpdate();
		this.setCommit(StatusCommitUpdateInstance.fromJSON(obj.commit));
	}
	if ('branches' in obj) {
		var StatusCommitBranch = require('./status_event_pb.js').StatusCommitBranch;
		var StatusCommitBranchInstance = new StatusCommitBranch();
		this.setBranches(StatusCommitBranchInstance.fromJSON(obj.branches));
	}
	'created_at' in obj && this.setCreatedAt(obj.created_at);
	'updated_at' in obj && this.setUpdatedAt(obj.updated_at);
	if ('repository' in obj) {
		var Repository = require('./repository_pb.js').Repository;
		var RepositoryInstance = new Repository();
		this.setRepository(RepositoryInstance.fromJSON(obj.repository));
	}
	if ('sender' in obj) {
		var User = require('./user_pb.js').User;
		var UserInstance = new User();
		this.setSender(UserInstance.fromJSON(obj.sender));
	}
	return this;
};

proto.github.StatusEvent.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('id' in obj) {
		obj.id = obj.id;
		delete obj.id;
	}
	if ('sha' in obj) {
		obj.sha = obj.sha;
		delete obj.sha;
	}
	if ('name' in obj) {
		obj.name = obj.name;
		delete obj.name;
	}
	if ('targetUrl' in obj) {
		obj.target_url = obj.targetUrl;
		delete obj.targetUrl;
	}
	if ('context' in obj) {
		obj.context = obj.context;
		delete obj.context;
	}
	if ('description' in obj) {
		obj.description = obj.description;
		delete obj.description;
	}
	if ('state' in obj) {
		obj.state = obj.state;
		delete obj.state;
	}
	if ('commit' in obj) {
		obj.commit = this.getCommit().toJSON();
	}
	if ('branches' in obj) {
		obj.branches = this.getBranches().toJSON();
	}
	if ('createdAt' in obj) {
		obj.created_at = obj.createdAt;
		delete obj.createdAt;
	}
	if ('updatedAt' in obj) {
		obj.updated_at = obj.updatedAt;
		delete obj.updatedAt;
	}
	if ('repository' in obj) {
		obj.repository = this.getRepository().toJSON();
	}
	if ('sender' in obj) {
		obj.sender = this.getSender().toJSON();
	}
	return obj;
};



// .github.StatusCommitBranch
proto.github.StatusCommitBranch.prototype.fromJSON = function(obj) {
	'name' in obj && this.setName(obj.name);
	if ('commit' in obj) {
		var StatusCommitDetailTree = require('./status_event_pb.js').StatusCommitDetailTree;
		var StatusCommitDetailTreeInstance = new StatusCommitDetailTree();
		this.setCommit(StatusCommitDetailTreeInstance.fromJSON(obj.commit));
	}
	return this;
};

proto.github.StatusCommitBranch.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('name' in obj) {
		obj.name = obj.name;
		delete obj.name;
	}
	if ('commit' in obj) {
		obj.commit = this.getCommit().toJSON();
	}
	return obj;
};

