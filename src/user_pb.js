/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.github.User', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.User.displayName = 'proto.github.User';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.User.prototype.toObject = function(opt_includeInstance) {
  return proto.github.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.User} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    login: jspb.Message.getFieldWithDefault(msg, 2, ""),
    avatarUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gravatarId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    url: jspb.Message.getFieldWithDefault(msg, 5, ""),
    htmlUrl: jspb.Message.getFieldWithDefault(msg, 6, ""),
    followersUrl: jspb.Message.getFieldWithDefault(msg, 7, ""),
    followingUrl: jspb.Message.getFieldWithDefault(msg, 8, ""),
    gistsUrl: jspb.Message.getFieldWithDefault(msg, 9, ""),
    starredUrl: jspb.Message.getFieldWithDefault(msg, 10, ""),
    subscriptionsUrl: jspb.Message.getFieldWithDefault(msg, 11, ""),
    organizationsUrl: jspb.Message.getFieldWithDefault(msg, 12, ""),
    reposUrl: jspb.Message.getFieldWithDefault(msg, 13, ""),
    eventsUrl: jspb.Message.getFieldWithDefault(msg, 14, ""),
    receivedEventsUrl: jspb.Message.getFieldWithDefault(msg, 15, ""),
    type: jspb.Message.getFieldWithDefault(msg, 16, ""),
    siteAdmin: jspb.Message.getFieldWithDefault(msg, 17, false),
    name: jspb.Message.getFieldWithDefault(msg, 18, ""),
    company: jspb.Message.getFieldWithDefault(msg, 19, ""),
    blog: jspb.Message.getFieldWithDefault(msg, 20, ""),
    location: jspb.Message.getFieldWithDefault(msg, 21, ""),
    email: jspb.Message.getFieldWithDefault(msg, 22, ""),
    hireable: jspb.Message.getFieldWithDefault(msg, 23, false),
    bio: jspb.Message.getFieldWithDefault(msg, 24, ""),
    publicRepos: jspb.Message.getFieldWithDefault(msg, 25, 0),
    publicGists: jspb.Message.getFieldWithDefault(msg, 26, 0),
    followers: jspb.Message.getFieldWithDefault(msg, 27, 0),
    following: jspb.Message.getFieldWithDefault(msg, 28, 0),
    createdAt: jspb.Message.getFieldWithDefault(msg, 29, ""),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 30, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.User}
 */
proto.github.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.User;
  return proto.github.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.User}
 */
proto.github.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogin(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGravatarId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtmlUrl(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFollowersUrl(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFollowingUrl(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setGistsUrl(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarredUrl(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubscriptionsUrl(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationsUrl(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setReposUrl(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventsUrl(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceivedEventsUrl(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSiteAdmin(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompany(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlog(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHireable(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setBio(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPublicRepos(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPublicGists(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFollowers(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFollowing(value);
      break;
    case 29:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.User} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.User.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.User.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getLogin();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAvatarUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getGravatarId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getHtmlUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getFollowersUrl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getFollowingUrl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getGistsUrl();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getStarredUrl();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getSubscriptionsUrl();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getOrganizationsUrl();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = this.getReposUrl();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = this.getEventsUrl();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = this.getReceivedEventsUrl();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = this.getSiteAdmin();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = this.getCompany();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = this.getBlog();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = this.getLocation();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = this.getEmail();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = this.getHireable();
  if (f) {
    writer.writeBool(
      23,
      f
    );
  }
  f = this.getBio();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
  f = this.getPublicRepos();
  if (f !== 0) {
    writer.writeInt32(
      25,
      f
    );
  }
  f = this.getPublicGists();
  if (f !== 0) {
    writer.writeInt32(
      26,
      f
    );
  }
  f = this.getFollowers();
  if (f !== 0) {
    writer.writeInt32(
      27,
      f
    );
  }
  f = this.getFollowing();
  if (f !== 0) {
    writer.writeInt32(
      28,
      f
    );
  }
  f = this.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      29,
      f
    );
  }
  f = this.getUpdatedAt();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.github.User.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.github.User.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string login = 2;
 * @return {string}
 */
proto.github.User.prototype.getLogin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.User.prototype.setLogin = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string avatar_url = 3;
 * @return {string}
 */
proto.github.User.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.github.User.prototype.setAvatarUrl = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string gravatar_id = 4;
 * @return {string}
 */
proto.github.User.prototype.getGravatarId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.github.User.prototype.setGravatarId = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string url = 5;
 * @return {string}
 */
proto.github.User.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.github.User.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string html_url = 6;
 * @return {string}
 */
proto.github.User.prototype.getHtmlUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.github.User.prototype.setHtmlUrl = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string followers_url = 7;
 * @return {string}
 */
proto.github.User.prototype.getFollowersUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.github.User.prototype.setFollowersUrl = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string following_url = 8;
 * @return {string}
 */
proto.github.User.prototype.getFollowingUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.github.User.prototype.setFollowingUrl = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string gists_url = 9;
 * @return {string}
 */
proto.github.User.prototype.getGistsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.github.User.prototype.setGistsUrl = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string starred_url = 10;
 * @return {string}
 */
proto.github.User.prototype.getStarredUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.github.User.prototype.setStarredUrl = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string subscriptions_url = 11;
 * @return {string}
 */
proto.github.User.prototype.getSubscriptionsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.github.User.prototype.setSubscriptionsUrl = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string organizations_url = 12;
 * @return {string}
 */
proto.github.User.prototype.getOrganizationsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.github.User.prototype.setOrganizationsUrl = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string repos_url = 13;
 * @return {string}
 */
proto.github.User.prototype.getReposUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.github.User.prototype.setReposUrl = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string events_url = 14;
 * @return {string}
 */
proto.github.User.prototype.getEventsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.github.User.prototype.setEventsUrl = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string received_events_url = 15;
 * @return {string}
 */
proto.github.User.prototype.getReceivedEventsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.github.User.prototype.setReceivedEventsUrl = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional string type = 16;
 * @return {string}
 */
proto.github.User.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.github.User.prototype.setType = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional bool site_admin = 17;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.User.prototype.getSiteAdmin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 17, false));
};


/** @param {boolean} value */
proto.github.User.prototype.setSiteAdmin = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional string name = 18;
 * @return {string}
 */
proto.github.User.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.github.User.prototype.setName = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional string company = 19;
 * @return {string}
 */
proto.github.User.prototype.getCompany = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.github.User.prototype.setCompany = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional string blog = 20;
 * @return {string}
 */
proto.github.User.prototype.getBlog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.github.User.prototype.setBlog = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * optional string location = 21;
 * @return {string}
 */
proto.github.User.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.github.User.prototype.setLocation = function(value) {
  jspb.Message.setField(this, 21, value);
};


/**
 * optional string email = 22;
 * @return {string}
 */
proto.github.User.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/** @param {string} value */
proto.github.User.prototype.setEmail = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * optional bool hireable = 23;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.User.prototype.getHireable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 23, false));
};


/** @param {boolean} value */
proto.github.User.prototype.setHireable = function(value) {
  jspb.Message.setField(this, 23, value);
};


/**
 * optional string bio = 24;
 * @return {string}
 */
proto.github.User.prototype.getBio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/** @param {string} value */
proto.github.User.prototype.setBio = function(value) {
  jspb.Message.setField(this, 24, value);
};


/**
 * optional int32 public_repos = 25;
 * @return {number}
 */
proto.github.User.prototype.getPublicRepos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/** @param {number} value */
proto.github.User.prototype.setPublicRepos = function(value) {
  jspb.Message.setField(this, 25, value);
};


/**
 * optional int32 public_gists = 26;
 * @return {number}
 */
proto.github.User.prototype.getPublicGists = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/** @param {number} value */
proto.github.User.prototype.setPublicGists = function(value) {
  jspb.Message.setField(this, 26, value);
};


/**
 * optional int32 followers = 27;
 * @return {number}
 */
proto.github.User.prototype.getFollowers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 27, 0));
};


/** @param {number} value */
proto.github.User.prototype.setFollowers = function(value) {
  jspb.Message.setField(this, 27, value);
};


/**
 * optional int32 following = 28;
 * @return {number}
 */
proto.github.User.prototype.getFollowing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 28, 0));
};


/** @param {number} value */
proto.github.User.prototype.setFollowing = function(value) {
  jspb.Message.setField(this, 28, value);
};


/**
 * optional string created_at = 29;
 * @return {string}
 */
proto.github.User.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 29, ""));
};


/** @param {string} value */
proto.github.User.prototype.setCreatedAt = function(value) {
  jspb.Message.setField(this, 29, value);
};


/**
 * optional string updated_at = 30;
 * @return {string}
 */
proto.github.User.prototype.getUpdatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/** @param {string} value */
proto.github.User.prototype.setUpdatedAt = function(value) {
  jspb.Message.setField(this, 30, value);
};


goog.object.extend(exports, proto.github);


// patched by github-protobuf to add toJSON and fromJSON methods

function _toBool (obj) {
	if (typeof(obj) === 'boolean') { return obj; }
	if (typeof(obj) === 'string') { return obj === 'true'; }
	if (typeof(obj) === 'number') { return obj > 0; }
	return false;
};



// .github.User
proto.github.User.prototype.fromJSON = function(obj) {
	'id' in obj && this.setId(+obj.id);
	'login' in obj && this.setLogin(obj.login);
	'avatar_url' in obj && this.setAvatarUrl(obj.avatar_url);
	'gravatar_id' in obj && this.setGravatarId(obj.gravatar_id);
	'url' in obj && this.setUrl(obj.url);
	'html_url' in obj && this.setHtmlUrl(obj.html_url);
	'followers_url' in obj && this.setFollowersUrl(obj.followers_url);
	'following_url' in obj && this.setFollowingUrl(obj.following_url);
	'gists_url' in obj && this.setGistsUrl(obj.gists_url);
	'starred_url' in obj && this.setStarredUrl(obj.starred_url);
	'subscriptions_url' in obj && this.setSubscriptionsUrl(obj.subscriptions_url);
	'organizations_url' in obj && this.setOrganizationsUrl(obj.organizations_url);
	'repos_url' in obj && this.setReposUrl(obj.repos_url);
	'events_url' in obj && this.setEventsUrl(obj.events_url);
	'received_events_url' in obj && this.setReceivedEventsUrl(obj.received_events_url);
	'type' in obj && this.setType(obj.type);
	'site_admin' in obj && this.setSiteAdmin(_toBool(obj.site_admin));
	'name' in obj && this.setName(obj.name);
	'company' in obj && this.setCompany(obj.company);
	'blog' in obj && this.setBlog(obj.blog);
	'location' in obj && this.setLocation(obj.location);
	'email' in obj && this.setEmail(obj.email);
	'hireable' in obj && this.setHireable(_toBool(obj.hireable));
	'bio' in obj && this.setBio(obj.bio);
	'public_repos' in obj && this.setPublicRepos(+obj.public_repos);
	'public_gists' in obj && this.setPublicGists(+obj.public_gists);
	'followers' in obj && this.setFollowers(+obj.followers);
	'following' in obj && this.setFollowing(+obj.following);
	'created_at' in obj && this.setCreatedAt(obj.created_at);
	'updated_at' in obj && this.setUpdatedAt(obj.updated_at);
	return this;
};

proto.github.User.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('id' in obj) {
		obj.id = obj.id;
		delete obj.id;
	}
	if ('login' in obj) {
		obj.login = obj.login;
		delete obj.login;
	}
	if ('avatarUrl' in obj) {
		obj.avatar_url = obj.avatarUrl;
		delete obj.avatarUrl;
	}
	if ('gravatarId' in obj) {
		obj.gravatar_id = obj.gravatarId;
		delete obj.gravatarId;
	}
	if ('url' in obj) {
		obj.url = obj.url;
		delete obj.url;
	}
	if ('htmlUrl' in obj) {
		obj.html_url = obj.htmlUrl;
		delete obj.htmlUrl;
	}
	if ('followersUrl' in obj) {
		obj.followers_url = obj.followersUrl;
		delete obj.followersUrl;
	}
	if ('followingUrl' in obj) {
		obj.following_url = obj.followingUrl;
		delete obj.followingUrl;
	}
	if ('gistsUrl' in obj) {
		obj.gists_url = obj.gistsUrl;
		delete obj.gistsUrl;
	}
	if ('starredUrl' in obj) {
		obj.starred_url = obj.starredUrl;
		delete obj.starredUrl;
	}
	if ('subscriptionsUrl' in obj) {
		obj.subscriptions_url = obj.subscriptionsUrl;
		delete obj.subscriptionsUrl;
	}
	if ('organizationsUrl' in obj) {
		obj.organizations_url = obj.organizationsUrl;
		delete obj.organizationsUrl;
	}
	if ('reposUrl' in obj) {
		obj.repos_url = obj.reposUrl;
		delete obj.reposUrl;
	}
	if ('eventsUrl' in obj) {
		obj.events_url = obj.eventsUrl;
		delete obj.eventsUrl;
	}
	if ('receivedEventsUrl' in obj) {
		obj.received_events_url = obj.receivedEventsUrl;
		delete obj.receivedEventsUrl;
	}
	if ('type' in obj) {
		obj.type = obj.type;
		delete obj.type;
	}
	if ('siteAdmin' in obj) {
		obj.site_admin = obj.siteAdmin;
		delete obj.siteAdmin;
	}
	if ('name' in obj) {
		obj.name = obj.name;
		delete obj.name;
	}
	if ('company' in obj) {
		obj.company = obj.company;
		delete obj.company;
	}
	if ('blog' in obj) {
		obj.blog = obj.blog;
		delete obj.blog;
	}
	if ('location' in obj) {
		obj.location = obj.location;
		delete obj.location;
	}
	if ('email' in obj) {
		obj.email = obj.email;
		delete obj.email;
	}
	if ('hireable' in obj) {
		obj.hireable = obj.hireable;
		delete obj.hireable;
	}
	if ('bio' in obj) {
		obj.bio = obj.bio;
		delete obj.bio;
	}
	if ('publicRepos' in obj) {
		obj.public_repos = obj.publicRepos;
		delete obj.publicRepos;
	}
	if ('publicGists' in obj) {
		obj.public_gists = obj.publicGists;
		delete obj.publicGists;
	}
	if ('followers' in obj) {
		obj.followers = obj.followers;
		delete obj.followers;
	}
	if ('following' in obj) {
		obj.following = obj.following;
		delete obj.following;
	}
	if ('createdAt' in obj) {
		obj.created_at = obj.createdAt;
		delete obj.createdAt;
	}
	if ('updatedAt' in obj) {
		obj.updated_at = obj.updatedAt;
		delete obj.updatedAt;
	}
	return obj;
};

