/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var user_pb = require('./user_pb.js');
var commit_user_pb = require('./commit_user_pb.js');
var repository_pb = require('./repository_pb.js');
goog.exportSymbol('proto.github.PushCommit', null, global);
goog.exportSymbol('proto.github.PushEvent', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.PushCommit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.PushCommit.repeatedFields_, null);
};
goog.inherits(proto.github.PushCommit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.PushCommit.displayName = 'proto.github.PushCommit';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.PushCommit.repeatedFields_ = [9,10,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.PushCommit.prototype.toObject = function(opt_includeInstance) {
  return proto.github.PushCommit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.PushCommit} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.PushCommit.toObject = function(includeInstance, msg) {
  var f, obj = {
    sha: jspb.Message.getFieldWithDefault(msg, 1, ""),
    treeId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    distinct: jspb.Message.getFieldWithDefault(msg, 3, false),
    message: jspb.Message.getFieldWithDefault(msg, 4, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, ""),
    url: jspb.Message.getFieldWithDefault(msg, 6, ""),
    author: (f = msg.getAuthor()) && commit_user_pb.CommitUser.toObject(includeInstance, f),
    committer: (f = msg.getCommitter()) && commit_user_pb.CommitUser.toObject(includeInstance, f),
    addedList: jspb.Message.getField(msg, 9),
    removedList: jspb.Message.getField(msg, 10),
    modifiedList: jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.PushCommit}
 */
proto.github.PushCommit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.PushCommit;
  return proto.github.PushCommit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.PushCommit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.PushCommit}
 */
proto.github.PushCommit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSha(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTreeId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDistinct(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 7:
      var value = new commit_user_pb.CommitUser;
      reader.readMessage(value,commit_user_pb.CommitUser.deserializeBinaryFromReader);
      msg.setAuthor(value);
      break;
    case 8:
      var value = new commit_user_pb.CommitUser;
      reader.readMessage(value,commit_user_pb.CommitUser.deserializeBinaryFromReader);
      msg.setCommitter(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addAdded(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addRemoved(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addModified(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.PushCommit} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.PushCommit.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.PushCommit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.PushCommit.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSha();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTreeId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getDistinct();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = this.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getAuthor();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      commit_user_pb.CommitUser.serializeBinaryToWriter
    );
  }
  f = this.getCommitter();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      commit_user_pb.CommitUser.serializeBinaryToWriter
    );
  }
  f = this.getAddedList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = this.getRemovedList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = this.getModifiedList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
};


/**
 * optional string sha = 1;
 * @return {string}
 */
proto.github.PushCommit.prototype.getSha = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.PushCommit.prototype.setSha = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string tree_id = 2;
 * @return {string}
 */
proto.github.PushCommit.prototype.getTreeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.PushCommit.prototype.setTreeId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool distinct = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.PushCommit.prototype.getDistinct = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.github.PushCommit.prototype.setDistinct = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string message = 4;
 * @return {string}
 */
proto.github.PushCommit.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.github.PushCommit.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string timestamp = 5;
 * @return {string}
 */
proto.github.PushCommit.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.github.PushCommit.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string url = 6;
 * @return {string}
 */
proto.github.PushCommit.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.github.PushCommit.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional CommitUser author = 7;
 * @return {?proto.github.CommitUser}
 */
proto.github.PushCommit.prototype.getAuthor = function() {
  return /** @type{?proto.github.CommitUser} */ (
    jspb.Message.getWrapperField(this, commit_user_pb.CommitUser, 7));
};


/** @param {?proto.github.CommitUser|undefined} value */
proto.github.PushCommit.prototype.setAuthor = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.github.PushCommit.prototype.clearAuthor = function() {
  this.setAuthor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.PushCommit.prototype.hasAuthor = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CommitUser committer = 8;
 * @return {?proto.github.CommitUser}
 */
proto.github.PushCommit.prototype.getCommitter = function() {
  return /** @type{?proto.github.CommitUser} */ (
    jspb.Message.getWrapperField(this, commit_user_pb.CommitUser, 8));
};


/** @param {?proto.github.CommitUser|undefined} value */
proto.github.PushCommit.prototype.setCommitter = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.github.PushCommit.prototype.clearCommitter = function() {
  this.setCommitter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.PushCommit.prototype.hasCommitter = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated string added = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.github.PushCommit.prototype.getAddedList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 9));
};


/** @param {!Array.<string>} value */
proto.github.PushCommit.prototype.setAddedList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.github.PushCommit.prototype.addAdded = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.github.PushCommit.prototype.clearAddedList = function() {
  this.setAddedList([]);
};


/**
 * repeated string removed = 10;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.github.PushCommit.prototype.getRemovedList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 10));
};


/** @param {!Array.<string>} value */
proto.github.PushCommit.prototype.setRemovedList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.github.PushCommit.prototype.addRemoved = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.github.PushCommit.prototype.clearRemovedList = function() {
  this.setRemovedList([]);
};


/**
 * repeated string modified = 11;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.github.PushCommit.prototype.getModifiedList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 11));
};


/** @param {!Array.<string>} value */
proto.github.PushCommit.prototype.setModifiedList = function(value) {
  jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.github.PushCommit.prototype.addModified = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


proto.github.PushCommit.prototype.clearModifiedList = function() {
  this.setModifiedList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.PushEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.PushEvent.repeatedFields_, null);
};
goog.inherits(proto.github.PushEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.PushEvent.displayName = 'proto.github.PushEvent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.PushEvent.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.PushEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.github.PushEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.PushEvent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.PushEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    ref: jspb.Message.getFieldWithDefault(msg, 1, ""),
    before: jspb.Message.getFieldWithDefault(msg, 2, ""),
    after: jspb.Message.getFieldWithDefault(msg, 3, ""),
    created: jspb.Message.getFieldWithDefault(msg, 4, false),
    deleted: jspb.Message.getFieldWithDefault(msg, 5, false),
    forced: jspb.Message.getFieldWithDefault(msg, 6, false),
    baseRef: jspb.Message.getFieldWithDefault(msg, 7, ""),
    compare: jspb.Message.getFieldWithDefault(msg, 8, ""),
    commitsList: jspb.Message.toObjectList(msg.getCommitsList(),
    proto.github.PushCommit.toObject, includeInstance),
    headCommit: (f = msg.getHeadCommit()) && proto.github.PushCommit.toObject(includeInstance, f),
    repository: (f = msg.getRepository()) && repository_pb.Repository.toObject(includeInstance, f),
    pusher: (f = msg.getPusher()) && commit_user_pb.CommitUser.toObject(includeInstance, f),
    sender: (f = msg.getSender()) && user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.PushEvent}
 */
proto.github.PushEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.PushEvent;
  return proto.github.PushEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.PushEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.PushEvent}
 */
proto.github.PushEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBefore(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAfter(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCreated(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleted(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForced(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseRef(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompare(value);
      break;
    case 9:
      var value = new proto.github.PushCommit;
      reader.readMessage(value,proto.github.PushCommit.deserializeBinaryFromReader);
      msg.addCommits(value);
      break;
    case 10:
      var value = new proto.github.PushCommit;
      reader.readMessage(value,proto.github.PushCommit.deserializeBinaryFromReader);
      msg.setHeadCommit(value);
      break;
    case 11:
      var value = new repository_pb.Repository;
      reader.readMessage(value,repository_pb.Repository.deserializeBinaryFromReader);
      msg.setRepository(value);
      break;
    case 12:
      var value = new commit_user_pb.CommitUser;
      reader.readMessage(value,commit_user_pb.CommitUser.deserializeBinaryFromReader);
      msg.setPusher(value);
      break;
    case 13:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.PushEvent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.PushEvent.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.PushEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.PushEvent.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getBefore();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAfter();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getCreated();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = this.getDeleted();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = this.getForced();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = this.getBaseRef();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getCompare();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getCommitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.github.PushCommit.serializeBinaryToWriter
    );
  }
  f = this.getHeadCommit();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.github.PushCommit.serializeBinaryToWriter
    );
  }
  f = this.getRepository();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      repository_pb.Repository.serializeBinaryToWriter
    );
  }
  f = this.getPusher();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      commit_user_pb.CommitUser.serializeBinaryToWriter
    );
  }
  f = this.getSender();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.github.PushEvent.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.PushEvent.prototype.setRef = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string before = 2;
 * @return {string}
 */
proto.github.PushEvent.prototype.getBefore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.PushEvent.prototype.setBefore = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string after = 3;
 * @return {string}
 */
proto.github.PushEvent.prototype.getAfter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.github.PushEvent.prototype.setAfter = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool created = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.PushEvent.prototype.getCreated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.github.PushEvent.prototype.setCreated = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool deleted = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.PushEvent.prototype.getDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.github.PushEvent.prototype.setDeleted = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool forced = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.PushEvent.prototype.getForced = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.github.PushEvent.prototype.setForced = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string base_ref = 7;
 * @return {string}
 */
proto.github.PushEvent.prototype.getBaseRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.github.PushEvent.prototype.setBaseRef = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string compare = 8;
 * @return {string}
 */
proto.github.PushEvent.prototype.getCompare = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.github.PushEvent.prototype.setCompare = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * repeated PushCommit commits = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.github.PushCommit>}
 */
proto.github.PushEvent.prototype.getCommitsList = function() {
  return /** @type{!Array.<!proto.github.PushCommit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.PushCommit, 9));
};


/** @param {!Array.<!proto.github.PushCommit>} value */
proto.github.PushEvent.prototype.setCommitsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.github.PushCommit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.PushCommit}
 */
proto.github.PushEvent.prototype.addCommits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.github.PushCommit, opt_index);
};


proto.github.PushEvent.prototype.clearCommitsList = function() {
  this.setCommitsList([]);
};


/**
 * optional PushCommit head_commit = 10;
 * @return {?proto.github.PushCommit}
 */
proto.github.PushEvent.prototype.getHeadCommit = function() {
  return /** @type{?proto.github.PushCommit} */ (
    jspb.Message.getWrapperField(this, proto.github.PushCommit, 10));
};


/** @param {?proto.github.PushCommit|undefined} value */
proto.github.PushEvent.prototype.setHeadCommit = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.github.PushEvent.prototype.clearHeadCommit = function() {
  this.setHeadCommit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.PushEvent.prototype.hasHeadCommit = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Repository repository = 11;
 * @return {?proto.github.Repository}
 */
proto.github.PushEvent.prototype.getRepository = function() {
  return /** @type{?proto.github.Repository} */ (
    jspb.Message.getWrapperField(this, repository_pb.Repository, 11));
};


/** @param {?proto.github.Repository|undefined} value */
proto.github.PushEvent.prototype.setRepository = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.github.PushEvent.prototype.clearRepository = function() {
  this.setRepository(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.PushEvent.prototype.hasRepository = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional CommitUser pusher = 12;
 * @return {?proto.github.CommitUser}
 */
proto.github.PushEvent.prototype.getPusher = function() {
  return /** @type{?proto.github.CommitUser} */ (
    jspb.Message.getWrapperField(this, commit_user_pb.CommitUser, 12));
};


/** @param {?proto.github.CommitUser|undefined} value */
proto.github.PushEvent.prototype.setPusher = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.github.PushEvent.prototype.clearPusher = function() {
  this.setPusher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.PushEvent.prototype.hasPusher = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional User sender = 13;
 * @return {?proto.github.User}
 */
proto.github.PushEvent.prototype.getSender = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 13));
};


/** @param {?proto.github.User|undefined} value */
proto.github.PushEvent.prototype.setSender = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.github.PushEvent.prototype.clearSender = function() {
  this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.PushEvent.prototype.hasSender = function() {
  return jspb.Message.getField(this, 13) != null;
};


goog.object.extend(exports, proto.github);


// patched by github-protobuf to add toJSON and fromJSON methods

function _toBool (obj) {
	if (typeof(obj) === 'boolean') { return obj; }
	if (typeof(obj) === 'string') { return obj === 'true'; }
	if (typeof(obj) === 'number') { return obj > 0; }
	return false;
};



// .github.PushEvent
proto.github.PushEvent.prototype.fromJSON = function(obj) {
	'ref' in obj && this.setRef(obj.ref);
	'before' in obj && this.setBefore(obj.before);
	'after' in obj && this.setAfter(obj.after);
	'created' in obj && this.setCreated(_toBool(obj.created));
	'deleted' in obj && this.setDeleted(_toBool(obj.deleted));
	'forced' in obj && this.setForced(_toBool(obj.forced));
	'base_ref' in obj && this.setBaseRef(obj.base_ref);
	'compare' in obj && this.setCompare(obj.compare);
	if ('commits' in obj) {
		var PushCommit = require('./push_event_pb.js').PushCommit;
		var PushCommitInstance = new PushCommit();
		this.setCommits(PushCommitInstance.fromJSON(obj.commits));
	}
	if ('head_commit' in obj) {
		var PushCommit = require('./push_event_pb.js').PushCommit;
		var PushCommitInstance = new PushCommit();
		this.setHeadCommit(PushCommitInstance.fromJSON(obj.head_commit));
	}
	if ('repository' in obj) {
		var Repository = require('./repository_pb.js').Repository;
		var RepositoryInstance = new Repository();
		this.setRepository(RepositoryInstance.fromJSON(obj.repository));
	}
	if ('pusher' in obj) {
		var CommitUser = require('./commit_user_pb.js').CommitUser;
		var CommitUserInstance = new CommitUser();
		this.setPusher(CommitUserInstance.fromJSON(obj.pusher));
	}
	if ('sender' in obj) {
		var User = require('./user_pb.js').User;
		var UserInstance = new User();
		this.setSender(UserInstance.fromJSON(obj.sender));
	}
	return this;
};

proto.github.PushEvent.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('ref' in obj) {
		obj.ref = obj.ref;
		delete obj.ref;
	}
	if ('before' in obj) {
		obj.before = obj.before;
		delete obj.before;
	}
	if ('after' in obj) {
		obj.after = obj.after;
		delete obj.after;
	}
	if ('created' in obj) {
		obj.created = obj.created;
		delete obj.created;
	}
	if ('deleted' in obj) {
		obj.deleted = obj.deleted;
		delete obj.deleted;
	}
	if ('forced' in obj) {
		obj.forced = obj.forced;
		delete obj.forced;
	}
	if ('baseRef' in obj) {
		obj.base_ref = obj.baseRef;
		delete obj.baseRef;
	}
	if ('compare' in obj) {
		obj.compare = obj.compare;
		delete obj.compare;
	}
	if ('commits' in obj) {
		obj.commits = this.getCommits().toJSON();
	}
	if ('headCommit' in obj) {
		obj.head_commit = this.getHeadCommit().toJSON();
	}
	if ('repository' in obj) {
		obj.repository = this.getRepository().toJSON();
	}
	if ('pusher' in obj) {
		obj.pusher = this.getPusher().toJSON();
	}
	if ('sender' in obj) {
		obj.sender = this.getSender().toJSON();
	}
	return obj;
};



// .github.PushCommit
proto.github.PushCommit.prototype.fromJSON = function(obj) {
	'sha' in obj && this.setSha(obj.sha);
	'tree_id' in obj && this.setTreeId(obj.tree_id);
	'distinct' in obj && this.setDistinct(_toBool(obj.distinct));
	'message' in obj && this.setMessage(obj.message);
	'timestamp' in obj && this.setTimestamp(obj.timestamp);
	'url' in obj && this.setUrl(obj.url);
	if ('author' in obj) {
		var CommitUser = require('./commit_user_pb.js').CommitUser;
		var CommitUserInstance = new CommitUser();
		this.setAuthor(CommitUserInstance.fromJSON(obj.author));
	}
	if ('committer' in obj) {
		var CommitUser = require('./commit_user_pb.js').CommitUser;
		var CommitUserInstance = new CommitUser();
		this.setCommitter(CommitUserInstance.fromJSON(obj.committer));
	}
	'added' in obj && this.setAddedList(obj.added);
	'removed' in obj && this.setRemovedList(obj.removed);
	'modified' in obj && this.setModifiedList(obj.modified);
	return this;
};

proto.github.PushCommit.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('sha' in obj) {
		obj.sha = obj.sha;
		delete obj.sha;
	}
	if ('treeId' in obj) {
		obj.tree_id = obj.treeId;
		delete obj.treeId;
	}
	if ('distinct' in obj) {
		obj.distinct = obj.distinct;
		delete obj.distinct;
	}
	if ('message' in obj) {
		obj.message = obj.message;
		delete obj.message;
	}
	if ('timestamp' in obj) {
		obj.timestamp = obj.timestamp;
		delete obj.timestamp;
	}
	if ('url' in obj) {
		obj.url = obj.url;
		delete obj.url;
	}
	if ('author' in obj) {
		obj.author = this.getAuthor().toJSON();
	}
	if ('committer' in obj) {
		obj.committer = this.getCommitter().toJSON();
	}
	if ('addedList' in obj) {
		obj.added = obj.addedList;
		delete obj.addedList;
	}
	if ('removedList' in obj) {
		obj.removed = obj.removedList;
		delete obj.removedList;
	}
	if ('modifiedList' in obj) {
		obj.modified = obj.modifiedList;
		delete obj.modifiedList;
	}
	return obj;
};

