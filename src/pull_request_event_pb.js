/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var user_pb = require('./user_pb.js');
var repository_pb = require('./repository_pb.js');
var pull_request_pb = require('./pull_request_pb.js');
goog.exportSymbol('proto.github.PullRequestEvent', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.PullRequestEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.PullRequestEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.PullRequestEvent.displayName = 'proto.github.PullRequestEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.PullRequestEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.github.PullRequestEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.PullRequestEvent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.PullRequestEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, ""),
    number: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pullRequest: (f = msg.getPullRequest()) && pull_request_pb.PullRequest.toObject(includeInstance, f),
    repository: (f = msg.getRepository()) && repository_pb.Repository.toObject(includeInstance, f),
    sender: (f = msg.getSender()) && user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.PullRequestEvent}
 */
proto.github.PullRequestEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.PullRequestEvent;
  return proto.github.PullRequestEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.PullRequestEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.PullRequestEvent}
 */
proto.github.PullRequestEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumber(value);
      break;
    case 3:
      var value = new pull_request_pb.PullRequest;
      reader.readMessage(value,pull_request_pb.PullRequest.deserializeBinaryFromReader);
      msg.setPullRequest(value);
      break;
    case 4:
      var value = new repository_pb.Repository;
      reader.readMessage(value,repository_pb.Repository.deserializeBinaryFromReader);
      msg.setRepository(value);
      break;
    case 5:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.PullRequestEvent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.PullRequestEvent.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.PullRequestEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.PullRequestEvent.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getNumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getPullRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      pull_request_pb.PullRequest.serializeBinaryToWriter
    );
  }
  f = this.getRepository();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      repository_pb.Repository.serializeBinaryToWriter
    );
  }
  f = this.getSender();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional string action = 1;
 * @return {string}
 */
proto.github.PullRequestEvent.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.PullRequestEvent.prototype.setAction = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 number = 2;
 * @return {number}
 */
proto.github.PullRequestEvent.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.github.PullRequestEvent.prototype.setNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional PullRequest pull_request = 3;
 * @return {?proto.github.PullRequest}
 */
proto.github.PullRequestEvent.prototype.getPullRequest = function() {
  return /** @type{?proto.github.PullRequest} */ (
    jspb.Message.getWrapperField(this, pull_request_pb.PullRequest, 3));
};


/** @param {?proto.github.PullRequest|undefined} value */
proto.github.PullRequestEvent.prototype.setPullRequest = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.github.PullRequestEvent.prototype.clearPullRequest = function() {
  this.setPullRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.PullRequestEvent.prototype.hasPullRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Repository repository = 4;
 * @return {?proto.github.Repository}
 */
proto.github.PullRequestEvent.prototype.getRepository = function() {
  return /** @type{?proto.github.Repository} */ (
    jspb.Message.getWrapperField(this, repository_pb.Repository, 4));
};


/** @param {?proto.github.Repository|undefined} value */
proto.github.PullRequestEvent.prototype.setRepository = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.github.PullRequestEvent.prototype.clearRepository = function() {
  this.setRepository(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.PullRequestEvent.prototype.hasRepository = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional User sender = 5;
 * @return {?proto.github.User}
 */
proto.github.PullRequestEvent.prototype.getSender = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 5));
};


/** @param {?proto.github.User|undefined} value */
proto.github.PullRequestEvent.prototype.setSender = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.github.PullRequestEvent.prototype.clearSender = function() {
  this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.PullRequestEvent.prototype.hasSender = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.github);


// patched by github-protobuf to add toJSON and fromJSON methods

function _toBool (obj) {
	if (typeof(obj) === 'boolean') { return obj; }
	if (typeof(obj) === 'string') { return obj === 'true'; }
	if (typeof(obj) === 'number') { return obj > 0; }
	return false;
};



// .github.PullRequestEvent
proto.github.PullRequestEvent.prototype.fromJSON = function(obj) {
	'action' in obj && this.setAction(obj.action);
	'number' in obj && this.setNumber(+obj.number);
	if ('pull_request' in obj) {
		var PullRequest = require('./pull_request_pb.js').PullRequest;
		var PullRequestInstance = new PullRequest();
		this.setPullRequest(PullRequestInstance.fromJSON(obj.pull_request));
	}
	if ('repository' in obj) {
		var Repository = require('./repository_pb.js').Repository;
		var RepositoryInstance = new Repository();
		this.setRepository(RepositoryInstance.fromJSON(obj.repository));
	}
	if ('sender' in obj) {
		var User = require('./user_pb.js').User;
		var UserInstance = new User();
		this.setSender(UserInstance.fromJSON(obj.sender));
	}
	return this;
};

proto.github.PullRequestEvent.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('action' in obj) {
		obj.action = obj.action;
		delete obj.action;
	}
	if ('number' in obj) {
		obj.number = obj.number;
		delete obj.number;
	}
	if ('pullRequest' in obj) {
		obj.pull_request = this.getPullRequest().toJSON();
	}
	if ('repository' in obj) {
		obj.repository = this.getRepository().toJSON();
	}
	if ('sender' in obj) {
		obj.sender = this.getSender().toJSON();
	}
	return obj;
};

