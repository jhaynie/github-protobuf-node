/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var user_pb = require('./user_pb.js');
var repository_pb = require('./repository_pb.js');
goog.exportSymbol('proto.github.GollumEvent', null, global);
goog.exportSymbol('proto.github.GollumPage', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.GollumPage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.GollumPage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.GollumPage.displayName = 'proto.github.GollumPage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.GollumPage.prototype.toObject = function(opt_includeInstance) {
  return proto.github.GollumPage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.GollumPage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.GollumPage.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    summary: jspb.Message.getFieldWithDefault(msg, 3, ""),
    action: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sha: jspb.Message.getFieldWithDefault(msg, 5, ""),
    htmlUrl: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.GollumPage}
 */
proto.github.GollumPage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.GollumPage;
  return proto.github.GollumPage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.GollumPage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.GollumPage}
 */
proto.github.GollumPage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSummary(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSha(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtmlUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.GollumPage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.GollumPage.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.GollumPage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.GollumPage.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPageName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getSummary();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAction();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getSha();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getHtmlUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string page_name = 1;
 * @return {string}
 */
proto.github.GollumPage.prototype.getPageName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.GollumPage.prototype.setPageName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.github.GollumPage.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.GollumPage.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string summary = 3;
 * @return {string}
 */
proto.github.GollumPage.prototype.getSummary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.github.GollumPage.prototype.setSummary = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string action = 4;
 * @return {string}
 */
proto.github.GollumPage.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.github.GollumPage.prototype.setAction = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string sha = 5;
 * @return {string}
 */
proto.github.GollumPage.prototype.getSha = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.github.GollumPage.prototype.setSha = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string html_url = 6;
 * @return {string}
 */
proto.github.GollumPage.prototype.getHtmlUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.github.GollumPage.prototype.setHtmlUrl = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.GollumEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.GollumEvent.repeatedFields_, null);
};
goog.inherits(proto.github.GollumEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.GollumEvent.displayName = 'proto.github.GollumEvent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.GollumEvent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.GollumEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.github.GollumEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.GollumEvent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.GollumEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    pagesList: jspb.Message.toObjectList(msg.getPagesList(),
    proto.github.GollumPage.toObject, includeInstance),
    repository: (f = msg.getRepository()) && repository_pb.Repository.toObject(includeInstance, f),
    sender: (f = msg.getSender()) && user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.GollumEvent}
 */
proto.github.GollumEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.GollumEvent;
  return proto.github.GollumEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.GollumEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.GollumEvent}
 */
proto.github.GollumEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.github.GollumPage;
      reader.readMessage(value,proto.github.GollumPage.deserializeBinaryFromReader);
      msg.addPages(value);
      break;
    case 2:
      var value = new repository_pb.Repository;
      reader.readMessage(value,repository_pb.Repository.deserializeBinaryFromReader);
      msg.setRepository(value);
      break;
    case 3:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.GollumEvent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.GollumEvent.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.GollumEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.GollumEvent.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.github.GollumPage.serializeBinaryToWriter
    );
  }
  f = this.getRepository();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      repository_pb.Repository.serializeBinaryToWriter
    );
  }
  f = this.getSender();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GollumPage pages = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.github.GollumPage>}
 */
proto.github.GollumEvent.prototype.getPagesList = function() {
  return /** @type{!Array.<!proto.github.GollumPage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.GollumPage, 1));
};


/** @param {!Array.<!proto.github.GollumPage>} value */
proto.github.GollumEvent.prototype.setPagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.github.GollumPage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.GollumPage}
 */
proto.github.GollumEvent.prototype.addPages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.github.GollumPage, opt_index);
};


proto.github.GollumEvent.prototype.clearPagesList = function() {
  this.setPagesList([]);
};


/**
 * optional Repository repository = 2;
 * @return {?proto.github.Repository}
 */
proto.github.GollumEvent.prototype.getRepository = function() {
  return /** @type{?proto.github.Repository} */ (
    jspb.Message.getWrapperField(this, repository_pb.Repository, 2));
};


/** @param {?proto.github.Repository|undefined} value */
proto.github.GollumEvent.prototype.setRepository = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.github.GollumEvent.prototype.clearRepository = function() {
  this.setRepository(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.GollumEvent.prototype.hasRepository = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional User sender = 3;
 * @return {?proto.github.User}
 */
proto.github.GollumEvent.prototype.getSender = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 3));
};


/** @param {?proto.github.User|undefined} value */
proto.github.GollumEvent.prototype.setSender = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.github.GollumEvent.prototype.clearSender = function() {
  this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.GollumEvent.prototype.hasSender = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.github);


// patched by github-protobuf to add toJSON and fromJSON methods

function _toBool (obj) {
	if (typeof(obj) === 'boolean') { return obj; }
	if (typeof(obj) === 'string') { return obj === 'true'; }
	if (typeof(obj) === 'number') { return obj > 0; }
	return false;
};



// .github.GollumPage
proto.github.GollumPage.prototype.fromJSON = function(obj) {
	'page_name' in obj && this.setPageName(obj.page_name);
	'title' in obj && this.setTitle(obj.title);
	'summary' in obj && this.setSummary(obj.summary);
	'action' in obj && this.setAction(obj.action);
	'sha' in obj && this.setSha(obj.sha);
	'html_url' in obj && this.setHtmlUrl(obj.html_url);
	return this;
};

proto.github.GollumPage.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('pageName' in obj) {
		obj.page_name = obj.pageName;
		delete obj.pageName;
	}
	if ('title' in obj) {
		obj.title = obj.title;
		delete obj.title;
	}
	if ('summary' in obj) {
		obj.summary = obj.summary;
		delete obj.summary;
	}
	if ('action' in obj) {
		obj.action = obj.action;
		delete obj.action;
	}
	if ('sha' in obj) {
		obj.sha = obj.sha;
		delete obj.sha;
	}
	if ('htmlUrl' in obj) {
		obj.html_url = obj.htmlUrl;
		delete obj.htmlUrl;
	}
	return obj;
};



// .github.GollumEvent
proto.github.GollumEvent.prototype.fromJSON = function(obj) {
	if ('pages' in obj) {
		var GollumPage = require('./gollum_event_pb.js').GollumPage;
		var GollumPageInstance = new GollumPage();
		this.setPages(GollumPageInstance.fromJSON(obj.pages));
	}
	if ('repository' in obj) {
		var Repository = require('./repository_pb.js').Repository;
		var RepositoryInstance = new Repository();
		this.setRepository(RepositoryInstance.fromJSON(obj.repository));
	}
	if ('sender' in obj) {
		var User = require('./user_pb.js').User;
		var UserInstance = new User();
		this.setSender(UserInstance.fromJSON(obj.sender));
	}
	return this;
};

proto.github.GollumEvent.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('pages' in obj) {
		obj.pages = this.getPages().toJSON();
	}
	if ('repository' in obj) {
		obj.repository = this.getRepository().toJSON();
	}
	if ('sender' in obj) {
		obj.sender = this.getSender().toJSON();
	}
	return obj;
};

