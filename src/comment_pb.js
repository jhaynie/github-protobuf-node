/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var user_pb = require('./user_pb.js');
goog.exportSymbol('proto.github.Comment', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.Comment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.Comment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.Comment.displayName = 'proto.github.Comment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.Comment.prototype.toObject = function(opt_includeInstance) {
  return proto.github.Comment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.Comment} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.Comment.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    htmlUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, 0),
    user: (f = msg.getUser()) && user_pb.User.toObject(includeInstance, f),
    position: jspb.Message.getFieldWithDefault(msg, 5, 0),
    line: jspb.Message.getFieldWithDefault(msg, 6, 0),
    path: jspb.Message.getFieldWithDefault(msg, 7, ""),
    commitId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 9, ""),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 10, ""),
    body: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.Comment}
 */
proto.github.Comment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.Comment;
  return proto.github.Comment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.Comment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.Comment}
 */
proto.github.Comment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtmlUrl(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 4:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosition(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLine(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedAt(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.Comment} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.Comment.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.Comment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.Comment.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getHtmlUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getUser();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = this.getPosition();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = this.getLine();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = this.getPath();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getCommitId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getUpdatedAt();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getBody();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.github.Comment.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.Comment.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string html_url = 2;
 * @return {string}
 */
proto.github.Comment.prototype.getHtmlUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.Comment.prototype.setHtmlUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 id = 3;
 * @return {number}
 */
proto.github.Comment.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.github.Comment.prototype.setId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional User user = 4;
 * @return {?proto.github.User}
 */
proto.github.Comment.prototype.getUser = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 4));
};


/** @param {?proto.github.User|undefined} value */
proto.github.Comment.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.github.Comment.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Comment.prototype.hasUser = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 position = 5;
 * @return {number}
 */
proto.github.Comment.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.github.Comment.prototype.setPosition = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 line = 6;
 * @return {number}
 */
proto.github.Comment.prototype.getLine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.github.Comment.prototype.setLine = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string path = 7;
 * @return {string}
 */
proto.github.Comment.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.github.Comment.prototype.setPath = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string commit_id = 8;
 * @return {string}
 */
proto.github.Comment.prototype.getCommitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.github.Comment.prototype.setCommitId = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string created_at = 9;
 * @return {string}
 */
proto.github.Comment.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.github.Comment.prototype.setCreatedAt = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string updated_at = 10;
 * @return {string}
 */
proto.github.Comment.prototype.getUpdatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.github.Comment.prototype.setUpdatedAt = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string body = 11;
 * @return {string}
 */
proto.github.Comment.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.github.Comment.prototype.setBody = function(value) {
  jspb.Message.setField(this, 11, value);
};


goog.object.extend(exports, proto.github);
