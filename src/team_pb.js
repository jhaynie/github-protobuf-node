/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.github.Team', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.Team = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.Team, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.Team.displayName = 'proto.github.Team';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.Team.prototype.toObject = function(opt_includeInstance) {
  return proto.github.Team.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.Team} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.Team.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    slug: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    permission: jspb.Message.getFieldWithDefault(msg, 5, ""),
    url: jspb.Message.getFieldWithDefault(msg, 6, ""),
    membersUrl: jspb.Message.getFieldWithDefault(msg, 7, ""),
    repositoriesUrl: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.Team}
 */
proto.github.Team.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.Team;
  return proto.github.Team.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.Team} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.Team}
 */
proto.github.Team.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPermission(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMembersUrl(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRepositoriesUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.Team} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.Team.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.Team.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.Team.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getSlug();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getPermission();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getMembersUrl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getRepositoriesUrl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.github.Team.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.Team.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.github.Team.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.github.Team.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string slug = 3;
 * @return {string}
 */
proto.github.Team.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.github.Team.prototype.setSlug = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.github.Team.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.github.Team.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string permission = 5;
 * @return {string}
 */
proto.github.Team.prototype.getPermission = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.github.Team.prototype.setPermission = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string url = 6;
 * @return {string}
 */
proto.github.Team.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.github.Team.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string members_url = 7;
 * @return {string}
 */
proto.github.Team.prototype.getMembersUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.github.Team.prototype.setMembersUrl = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string repositories_url = 8;
 * @return {string}
 */
proto.github.Team.prototype.getRepositoriesUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.github.Team.prototype.setRepositoriesUrl = function(value) {
  jspb.Message.setField(this, 8, value);
};


goog.object.extend(exports, proto.github);


// patched by github-protobuf to add toJSON and fromJSON methods

function _toBool (obj) {
	if (typeof(obj) === 'boolean') { return obj; }
	if (typeof(obj) === 'string') { return obj === 'true'; }
	if (typeof(obj) === 'number') { return obj > 0; }
	return false;
};



// .github.Team
proto.github.Team.prototype.fromJSON = function(obj) {
	'name' in obj && this.setName(obj.name);
	'id' in obj && this.setId(+obj.id);
	'slug' in obj && this.setSlug(obj.slug);
	'description' in obj && this.setDescription(obj.description);
	'permission' in obj && this.setPermission(obj.permission);
	'url' in obj && this.setUrl(obj.url);
	'members_url' in obj && this.setMembersUrl(obj.members_url);
	'repositories_url' in obj && this.setRepositoriesUrl(obj.repositories_url);
	return this;
};

proto.github.Team.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('name' in obj) {
		obj.name = obj.name;
		delete obj.name;
	}
	if ('id' in obj) {
		obj.id = obj.id;
		delete obj.id;
	}
	if ('slug' in obj) {
		obj.slug = obj.slug;
		delete obj.slug;
	}
	if ('description' in obj) {
		obj.description = obj.description;
		delete obj.description;
	}
	if ('permission' in obj) {
		obj.permission = obj.permission;
		delete obj.permission;
	}
	if ('url' in obj) {
		obj.url = obj.url;
		delete obj.url;
	}
	if ('membersUrl' in obj) {
		obj.members_url = obj.membersUrl;
		delete obj.membersUrl;
	}
	if ('repositoriesUrl' in obj) {
		obj.repositories_url = obj.repositoriesUrl;
		delete obj.repositoriesUrl;
	}
	return obj;
};

