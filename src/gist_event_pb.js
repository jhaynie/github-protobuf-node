/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var user_pb = require('./user_pb.js');
goog.exportSymbol('proto.github.Gist', null, global);
goog.exportSymbol('proto.github.GistChangeStatus', null, global);
goog.exportSymbol('proto.github.GistEvent', null, global);
goog.exportSymbol('proto.github.GistFile', null, global);
goog.exportSymbol('proto.github.GistFork', null, global);
goog.exportSymbol('proto.github.GistHistory', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.GistFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.GistFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.GistFile.displayName = 'proto.github.GistFile';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.GistFile.prototype.toObject = function(opt_includeInstance) {
  return proto.github.GistFile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.GistFile} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.GistFile.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rawUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    language: jspb.Message.getFieldWithDefault(msg, 4, ""),
    truncated: jspb.Message.getFieldWithDefault(msg, 5, false),
    content: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.GistFile}
 */
proto.github.GistFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.GistFile;
  return proto.github.GistFile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.GistFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.GistFile}
 */
proto.github.GistFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRawUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTruncated(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.GistFile} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.GistFile.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.GistFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.GistFile.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSize();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getRawUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getTruncated();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = this.getContent();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int32 size = 1;
 * @return {number}
 */
proto.github.GistFile.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.github.GistFile.prototype.setSize = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string raw_url = 2;
 * @return {string}
 */
proto.github.GistFile.prototype.getRawUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.GistFile.prototype.setRawUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.github.GistFile.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.github.GistFile.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string language = 4;
 * @return {string}
 */
proto.github.GistFile.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.github.GistFile.prototype.setLanguage = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool truncated = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.GistFile.prototype.getTruncated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.github.GistFile.prototype.setTruncated = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string content = 6;
 * @return {string}
 */
proto.github.GistFile.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.github.GistFile.prototype.setContent = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.GistFork = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.GistFork, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.GistFork.displayName = 'proto.github.GistFork';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.GistFork.prototype.toObject = function(opt_includeInstance) {
  return proto.github.GistFork.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.GistFork} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.GistFork.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && user_pb.User.toObject(includeInstance, f),
    url: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 4, ""),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.GistFork}
 */
proto.github.GistFork.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.GistFork;
  return proto.github.GistFork.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.GistFork} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.GistFork}
 */
proto.github.GistFork.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.GistFork} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.GistFork.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.GistFork.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.GistFork.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getUpdatedAt();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.github.User}
 */
proto.github.GistFork.prototype.getUser = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 1));
};


/** @param {?proto.github.User|undefined} value */
proto.github.GistFork.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.github.GistFork.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.GistFork.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.github.GistFork.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.GistFork.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.github.GistFork.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.github.GistFork.prototype.setId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string created_at = 4;
 * @return {string}
 */
proto.github.GistFork.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.github.GistFork.prototype.setCreatedAt = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string updated_at = 5;
 * @return {string}
 */
proto.github.GistFork.prototype.getUpdatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.github.GistFork.prototype.setUpdatedAt = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.GistChangeStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.GistChangeStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.GistChangeStatus.displayName = 'proto.github.GistChangeStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.GistChangeStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.github.GistChangeStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.GistChangeStatus} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.GistChangeStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    deletions: jspb.Message.getFieldWithDefault(msg, 1, 0),
    additions: jspb.Message.getFieldWithDefault(msg, 2, 0),
    total: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.GistChangeStatus}
 */
proto.github.GistChangeStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.GistChangeStatus;
  return proto.github.GistChangeStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.GistChangeStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.GistChangeStatus}
 */
proto.github.GistChangeStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeletions(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAdditions(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.GistChangeStatus} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.GistChangeStatus.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.GistChangeStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.GistChangeStatus.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDeletions();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getAdditions();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 deletions = 1;
 * @return {number}
 */
proto.github.GistChangeStatus.prototype.getDeletions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.github.GistChangeStatus.prototype.setDeletions = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 additions = 2;
 * @return {number}
 */
proto.github.GistChangeStatus.prototype.getAdditions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.github.GistChangeStatus.prototype.setAdditions = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 total = 3;
 * @return {number}
 */
proto.github.GistChangeStatus.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.github.GistChangeStatus.prototype.setTotal = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.GistHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.GistHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.GistHistory.displayName = 'proto.github.GistHistory';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.GistHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.github.GistHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.GistHistory} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.GistHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    user: (f = msg.getUser()) && user_pb.User.toObject(includeInstance, f),
    changeStatus: (f = msg.getChangeStatus()) && proto.github.GistChangeStatus.toObject(includeInstance, f),
    committedAt: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.GistHistory}
 */
proto.github.GistHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.GistHistory;
  return proto.github.GistHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.GistHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.GistHistory}
 */
proto.github.GistHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 4:
      var value = new proto.github.GistChangeStatus;
      reader.readMessage(value,proto.github.GistChangeStatus.deserializeBinaryFromReader);
      msg.setChangeStatus(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommittedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.GistHistory} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.GistHistory.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.GistHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.GistHistory.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = this.getChangeStatus();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.github.GistChangeStatus.serializeBinaryToWriter
    );
  }
  f = this.getCommittedAt();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.github.GistHistory.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.GistHistory.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.github.GistHistory.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.GistHistory.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional User user = 3;
 * @return {?proto.github.User}
 */
proto.github.GistHistory.prototype.getUser = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 3));
};


/** @param {?proto.github.User|undefined} value */
proto.github.GistHistory.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.github.GistHistory.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.GistHistory.prototype.hasUser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GistChangeStatus change_status = 4;
 * @return {?proto.github.GistChangeStatus}
 */
proto.github.GistHistory.prototype.getChangeStatus = function() {
  return /** @type{?proto.github.GistChangeStatus} */ (
    jspb.Message.getWrapperField(this, proto.github.GistChangeStatus, 4));
};


/** @param {?proto.github.GistChangeStatus|undefined} value */
proto.github.GistHistory.prototype.setChangeStatus = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.github.GistHistory.prototype.clearChangeStatus = function() {
  this.setChangeStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.GistHistory.prototype.hasChangeStatus = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string committed_at = 5;
 * @return {string}
 */
proto.github.GistHistory.prototype.getCommittedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.github.GistHistory.prototype.setCommittedAt = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.Gist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.Gist.repeatedFields_, null);
};
goog.inherits(proto.github.Gist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.Gist.displayName = 'proto.github.Gist';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.Gist.repeatedFields_ = [18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.Gist.prototype.toObject = function(opt_includeInstance) {
  return proto.github.Gist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.Gist} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.Gist.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    forksUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    commitsUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    id: jspb.Message.getFieldWithDefault(msg, 4, 0),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    pb_public: jspb.Message.getFieldWithDefault(msg, 6, false),
    owner: (f = msg.getOwner()) && user_pb.User.toObject(includeInstance, f),
    user: (f = msg.getUser()) && user_pb.User.toObject(includeInstance, f),
    filesMap: (f = msg.getFilesMap()) ? f.toArray() : [],
    truncated: jspb.Message.getFieldWithDefault(msg, 10, false),
    comments: jspb.Message.getFieldWithDefault(msg, 11, 0),
    commentsUrl: jspb.Message.getFieldWithDefault(msg, 12, ""),
    htmlUrl: jspb.Message.getFieldWithDefault(msg, 13, ""),
    gitPullUrl: jspb.Message.getFieldWithDefault(msg, 14, ""),
    gitPushUrl: jspb.Message.getFieldWithDefault(msg, 15, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 16, ""),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 17, ""),
    forksList: jspb.Message.toObjectList(msg.getForksList(),
    proto.github.GistFork.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.Gist}
 */
proto.github.Gist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.Gist;
  return proto.github.Gist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.Gist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.Gist}
 */
proto.github.Gist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setForksUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitsUrl(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPublic(value);
      break;
    case 7:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 8:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 9:
      var value = msg.getFilesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.github.GistFile.deserializeBinaryFromReader);
         });
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTruncated(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setComments(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommentsUrl(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtmlUrl(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setGitPullUrl(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setGitPushUrl(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedAt(value);
      break;
    case 18:
      var value = new proto.github.GistFork;
      reader.readMessage(value,proto.github.GistFork.deserializeBinaryFromReader);
      msg.addForks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.Gist} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.Gist.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.Gist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.Gist.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getForksUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getCommitsUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getPublic();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = this.getOwner();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = this.getUser();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = this.getFilesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.github.GistFile.serializeBinaryToWriter);
  }
  f = this.getTruncated();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = this.getComments();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = this.getCommentsUrl();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = this.getHtmlUrl();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = this.getGitPullUrl();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = this.getGitPushUrl();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = this.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = this.getUpdatedAt();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = this.getForksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      proto.github.GistFork.serializeBinaryToWriter
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.github.Gist.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.Gist.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string forks_url = 2;
 * @return {string}
 */
proto.github.Gist.prototype.getForksUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.Gist.prototype.setForksUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string commits_url = 3;
 * @return {string}
 */
proto.github.Gist.prototype.getCommitsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.github.Gist.prototype.setCommitsUrl = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 id = 4;
 * @return {number}
 */
proto.github.Gist.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.github.Gist.prototype.setId = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.github.Gist.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.github.Gist.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool public = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.Gist.prototype.getPublic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.github.Gist.prototype.setPublic = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional User owner = 7;
 * @return {?proto.github.User}
 */
proto.github.Gist.prototype.getOwner = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 7));
};


/** @param {?proto.github.User|undefined} value */
proto.github.Gist.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.github.Gist.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Gist.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional User user = 8;
 * @return {?proto.github.User}
 */
proto.github.Gist.prototype.getUser = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 8));
};


/** @param {?proto.github.User|undefined} value */
proto.github.Gist.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.github.Gist.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Gist.prototype.hasUser = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * map<string, GistFile> files = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.github.GistFile>}
 */
proto.github.Gist.prototype.getFilesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.github.GistFile>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      proto.github.GistFile));
};


proto.github.Gist.prototype.clearFilesMap = function() {
  this.getFilesMap().clear();
};


/**
 * optional bool truncated = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.Gist.prototype.getTruncated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.github.Gist.prototype.setTruncated = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional int32 comments = 11;
 * @return {number}
 */
proto.github.Gist.prototype.getComments = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.github.Gist.prototype.setComments = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string comments_url = 12;
 * @return {string}
 */
proto.github.Gist.prototype.getCommentsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.github.Gist.prototype.setCommentsUrl = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string html_url = 13;
 * @return {string}
 */
proto.github.Gist.prototype.getHtmlUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.github.Gist.prototype.setHtmlUrl = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string git_pull_url = 14;
 * @return {string}
 */
proto.github.Gist.prototype.getGitPullUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.github.Gist.prototype.setGitPullUrl = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string git_push_url = 15;
 * @return {string}
 */
proto.github.Gist.prototype.getGitPushUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.github.Gist.prototype.setGitPushUrl = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional string created_at = 16;
 * @return {string}
 */
proto.github.Gist.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.github.Gist.prototype.setCreatedAt = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional string updated_at = 17;
 * @return {string}
 */
proto.github.Gist.prototype.getUpdatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.github.Gist.prototype.setUpdatedAt = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * repeated GistFork forks = 18;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.github.GistFork>}
 */
proto.github.Gist.prototype.getForksList = function() {
  return /** @type{!Array.<!proto.github.GistFork>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.GistFork, 18));
};


/** @param {!Array.<!proto.github.GistFork>} value */
proto.github.Gist.prototype.setForksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.github.GistFork=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.GistFork}
 */
proto.github.Gist.prototype.addForks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.github.GistFork, opt_index);
};


proto.github.Gist.prototype.clearForksList = function() {
  this.setForksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.GistEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.GistEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.GistEvent.displayName = 'proto.github.GistEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.GistEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.github.GistEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.GistEvent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.GistEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gist: (f = msg.getGist()) && proto.github.Gist.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.GistEvent}
 */
proto.github.GistEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.GistEvent;
  return proto.github.GistEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.GistEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.GistEvent}
 */
proto.github.GistEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 2:
      var value = new proto.github.Gist;
      reader.readMessage(value,proto.github.Gist.deserializeBinaryFromReader);
      msg.setGist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.GistEvent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.GistEvent.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.GistEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.GistEvent.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getGist();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.github.Gist.serializeBinaryToWriter
    );
  }
};


/**
 * optional string action = 1;
 * @return {string}
 */
proto.github.GistEvent.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.GistEvent.prototype.setAction = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Gist gist = 2;
 * @return {?proto.github.Gist}
 */
proto.github.GistEvent.prototype.getGist = function() {
  return /** @type{?proto.github.Gist} */ (
    jspb.Message.getWrapperField(this, proto.github.Gist, 2));
};


/** @param {?proto.github.Gist|undefined} value */
proto.github.GistEvent.prototype.setGist = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.github.GistEvent.prototype.clearGist = function() {
  this.setGist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.GistEvent.prototype.hasGist = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.github);


// patched by github-protobuf to add toJSON and fromJSON methods

function _toBool (obj) {
	if (typeof(obj) === 'boolean') { return obj; }
	if (typeof(obj) === 'string') { return obj === 'true'; }
	if (typeof(obj) === 'number') { return obj > 0; }
	return false;
};



// .github.GistChangeStatus
proto.github.GistChangeStatus.prototype.fromJSON = function(obj) {
	'deletions' in obj && this.setDeletions(+obj.deletions);
	'additions' in obj && this.setAdditions(+obj.additions);
	'total' in obj && this.setTotal(+obj.total);
	return this;
};

proto.github.GistChangeStatus.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('deletions' in obj) {
		obj.deletions = obj.deletions;
		delete obj.deletions;
	}
	if ('additions' in obj) {
		obj.additions = obj.additions;
		delete obj.additions;
	}
	if ('total' in obj) {
		obj.total = obj.total;
		delete obj.total;
	}
	return obj;
};



// .github.GistHistory
proto.github.GistHistory.prototype.fromJSON = function(obj) {
	'url' in obj && this.setUrl(obj.url);
	'version' in obj && this.setVersion(obj.version);
	if ('user' in obj) {
		var User = require('./user_pb.js').User;
		var UserInstance = new User();
		this.setUser(UserInstance.fromJSON(obj.user));
	}
	if ('change_status' in obj) {
		var GistChangeStatus = require('./gist_event_pb.js').GistChangeStatus;
		var GistChangeStatusInstance = new GistChangeStatus();
		this.setChangeStatus(GistChangeStatusInstance.fromJSON(obj.change_status));
	}
	'committed_at' in obj && this.setCommittedAt(obj.committed_at);
	return this;
};

proto.github.GistHistory.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('url' in obj) {
		obj.url = obj.url;
		delete obj.url;
	}
	if ('version' in obj) {
		obj.version = obj.version;
		delete obj.version;
	}
	if ('user' in obj) {
		obj.user = this.getUser().toJSON();
	}
	if ('changeStatus' in obj) {
		obj.change_status = this.getChangeStatus().toJSON();
	}
	if ('committedAt' in obj) {
		obj.committed_at = obj.committedAt;
		delete obj.committedAt;
	}
	return obj;
};



// .github.Gist
proto.github.Gist.prototype.fromJSON = function(obj) {
	'url' in obj && this.setUrl(obj.url);
	'forks_url' in obj && this.setForksUrl(obj.forks_url);
	'commits_url' in obj && this.setCommitsUrl(obj.commits_url);
	'id' in obj && this.setId(+obj.id);
	'description' in obj && this.setDescription(obj.description);
	'public' in obj && this.setPublic(_toBool(obj.public));
	if ('owner' in obj) {
		var User = require('./user_pb.js').User;
		var UserInstance = new User();
		this.setOwner(UserInstance.fromJSON(obj.owner));
	}
	if ('user' in obj) {
		var User = require('./user_pb.js').User;
		var UserInstance = new User();
		this.setUser(UserInstance.fromJSON(obj.user));
	}
	if ('files' in obj) {
		var m = this.getFilesMap();
		Object.keys(obj.files).forEach(function(k) {
			var GistFile = require('./gist_event_pb.js').GistFile;
			var GistFileInstance = new GistFile();
			var v = GistFileInstance.fromJSON(obj.files[k]));
			m.set(k, v);
		});
	}
	'truncated' in obj && this.setTruncated(_toBool(obj.truncated));
	'comments' in obj && this.setComments(+obj.comments);
	'comments_url' in obj && this.setCommentsUrl(obj.comments_url);
	'html_url' in obj && this.setHtmlUrl(obj.html_url);
	'git_pull_url' in obj && this.setGitPullUrl(obj.git_pull_url);
	'git_push_url' in obj && this.setGitPushUrl(obj.git_push_url);
	'created_at' in obj && this.setCreatedAt(obj.created_at);
	'updated_at' in obj && this.setUpdatedAt(obj.updated_at);
	if ('forks' in obj) {
		var GistFork = require('./gist_event_pb.js').GistFork;
		var GistForkInstance = new GistFork();
		this.setForks(GistForkInstance.fromJSON(obj.forks));
	}
	return this;
};

proto.github.Gist.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('url' in obj) {
		obj.url = obj.url;
		delete obj.url;
	}
	if ('forksUrl' in obj) {
		obj.forks_url = obj.forksUrl;
		delete obj.forksUrl;
	}
	if ('commitsUrl' in obj) {
		obj.commits_url = obj.commitsUrl;
		delete obj.commitsUrl;
	}
	if ('id' in obj) {
		obj.id = obj.id;
		delete obj.id;
	}
	if ('description' in obj) {
		obj.description = obj.description;
		delete obj.description;
	}
	if ('public' in obj) {
		obj.public = obj.public;
		delete obj.public;
	}
	if ('owner' in obj) {
		obj.owner = this.getOwner().toJSON();
	}
	if ('user' in obj) {
		obj.user = this.getUser().toJSON();
	}
	if ('filesMap' in obj) {
		var files = this.getFilesMap();
		obj.files = {};
		delete obj.filesMap;
		files.forEach(function(v, k) {
			obj.files[k] = v;
		});
	}
	if ('truncated' in obj) {
		obj.truncated = obj.truncated;
		delete obj.truncated;
	}
	if ('comments' in obj) {
		obj.comments = obj.comments;
		delete obj.comments;
	}
	if ('commentsUrl' in obj) {
		obj.comments_url = obj.commentsUrl;
		delete obj.commentsUrl;
	}
	if ('htmlUrl' in obj) {
		obj.html_url = obj.htmlUrl;
		delete obj.htmlUrl;
	}
	if ('gitPullUrl' in obj) {
		obj.git_pull_url = obj.gitPullUrl;
		delete obj.gitPullUrl;
	}
	if ('gitPushUrl' in obj) {
		obj.git_push_url = obj.gitPushUrl;
		delete obj.gitPushUrl;
	}
	if ('createdAt' in obj) {
		obj.created_at = obj.createdAt;
		delete obj.createdAt;
	}
	if ('updatedAt' in obj) {
		obj.updated_at = obj.updatedAt;
		delete obj.updatedAt;
	}
	if ('forks' in obj) {
		obj.forks = this.getForks().toJSON();
	}
	return obj;
};



// .github.GistFork
proto.github.GistFork.prototype.fromJSON = function(obj) {
	if ('user' in obj) {
		var User = require('./user_pb.js').User;
		var UserInstance = new User();
		this.setUser(UserInstance.fromJSON(obj.user));
	}
	'url' in obj && this.setUrl(obj.url);
	'id' in obj && this.setId(obj.id);
	'created_at' in obj && this.setCreatedAt(obj.created_at);
	'updated_at' in obj && this.setUpdatedAt(obj.updated_at);
	return this;
};

proto.github.GistFork.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('user' in obj) {
		obj.user = this.getUser().toJSON();
	}
	if ('url' in obj) {
		obj.url = obj.url;
		delete obj.url;
	}
	if ('id' in obj) {
		obj.id = obj.id;
		delete obj.id;
	}
	if ('createdAt' in obj) {
		obj.created_at = obj.createdAt;
		delete obj.createdAt;
	}
	if ('updatedAt' in obj) {
		obj.updated_at = obj.updatedAt;
		delete obj.updatedAt;
	}
	return obj;
};



// .github.GistFile
proto.github.GistFile.prototype.fromJSON = function(obj) {
	'FileSize' in obj && this.setFileSize(+obj.FileSize);
	'raw_url' in obj && this.setRawUrl(obj.raw_url);
	'type' in obj && this.setType(obj.type);
	'language' in obj && this.setLanguage(obj.language);
	'truncated' in obj && this.setTruncated(_toBool(obj.truncated));
	'content' in obj && this.setContent(obj.content);
	return this;
};

proto.github.GistFile.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('size' in obj) {
		obj.size = obj.size;
		delete obj.size;
	}
	if ('rawUrl' in obj) {
		obj.raw_url = obj.rawUrl;
		delete obj.rawUrl;
	}
	if ('type' in obj) {
		obj.type = obj.type;
		delete obj.type;
	}
	if ('language' in obj) {
		obj.language = obj.language;
		delete obj.language;
	}
	if ('truncated' in obj) {
		obj.truncated = obj.truncated;
		delete obj.truncated;
	}
	if ('content' in obj) {
		obj.content = obj.content;
		delete obj.content;
	}
	return obj;
};



// .github.GistEvent
proto.github.GistEvent.prototype.fromJSON = function(obj) {
	'action' in obj && this.setAction(obj.action);
	if ('gist' in obj) {
		var Gist = require('./gist_event_pb.js').Gist;
		var GistInstance = new Gist();
		this.setGist(GistInstance.fromJSON(obj.gist));
	}
	return this;
};

proto.github.GistEvent.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('action' in obj) {
		obj.action = obj.action;
		delete obj.action;
	}
	if ('gist' in obj) {
		obj.gist = this.getGist().toJSON();
	}
	return obj;
};

