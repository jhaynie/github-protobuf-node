/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var user_pb = require('./user_pb.js');
goog.exportSymbol('proto.github.Repository', null, global);
goog.exportSymbol('proto.github.RepositoryPermission', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.RepositoryPermission = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.RepositoryPermission, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.RepositoryPermission.displayName = 'proto.github.RepositoryPermission';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.RepositoryPermission.prototype.toObject = function(opt_includeInstance) {
  return proto.github.RepositoryPermission.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.RepositoryPermission} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.RepositoryPermission.toObject = function(includeInstance, msg) {
  var f, obj = {
    admin: jspb.Message.getFieldWithDefault(msg, 1, false),
    push: jspb.Message.getFieldWithDefault(msg, 2, false),
    pull: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.RepositoryPermission}
 */
proto.github.RepositoryPermission.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.RepositoryPermission;
  return proto.github.RepositoryPermission.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.RepositoryPermission} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.RepositoryPermission}
 */
proto.github.RepositoryPermission.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdmin(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPush(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPull(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.RepositoryPermission} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.RepositoryPermission.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.RepositoryPermission.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.RepositoryPermission.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAdmin();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getPush();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = this.getPull();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bool admin = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.RepositoryPermission.prototype.getAdmin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.github.RepositoryPermission.prototype.setAdmin = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool push = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.RepositoryPermission.prototype.getPush = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.github.RepositoryPermission.prototype.setPush = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool pull = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.RepositoryPermission.prototype.getPull = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.github.RepositoryPermission.prototype.setPull = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.Repository = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.Repository, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.Repository.displayName = 'proto.github.Repository';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.Repository.prototype.toObject = function(opt_includeInstance) {
  return proto.github.Repository.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.Repository} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.Repository.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    owner: (f = msg.getOwner()) && user_pb.User.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fullName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    pb_private: jspb.Message.getFieldWithDefault(msg, 6, false),
    fork: jspb.Message.getFieldWithDefault(msg, 7, false),
    url: jspb.Message.getFieldWithDefault(msg, 8, ""),
    htmlUrl: jspb.Message.getFieldWithDefault(msg, 9, ""),
    archiveUrl: jspb.Message.getFieldWithDefault(msg, 10, ""),
    assigneesUrl: jspb.Message.getFieldWithDefault(msg, 11, ""),
    blobsUrl: jspb.Message.getFieldWithDefault(msg, 12, ""),
    branchesUrl: jspb.Message.getFieldWithDefault(msg, 13, ""),
    cloneUrl: jspb.Message.getFieldWithDefault(msg, 14, ""),
    collaboratorsUrl: jspb.Message.getFieldWithDefault(msg, 15, ""),
    commentsUrl: jspb.Message.getFieldWithDefault(msg, 16, ""),
    commitsUrl: jspb.Message.getFieldWithDefault(msg, 17, ""),
    compareUrl: jspb.Message.getFieldWithDefault(msg, 18, ""),
    contentsUrl: jspb.Message.getFieldWithDefault(msg, 19, ""),
    contributorsUrl: jspb.Message.getFieldWithDefault(msg, 20, ""),
    deploymentsUrl: jspb.Message.getFieldWithDefault(msg, 21, ""),
    downloadsUrl: jspb.Message.getFieldWithDefault(msg, 22, ""),
    eventsUrl: jspb.Message.getFieldWithDefault(msg, 23, ""),
    forksUrl: jspb.Message.getFieldWithDefault(msg, 24, ""),
    gitCommitsUrl: jspb.Message.getFieldWithDefault(msg, 25, ""),
    gitRefsUrl: jspb.Message.getFieldWithDefault(msg, 26, ""),
    gitTagsUrl: jspb.Message.getFieldWithDefault(msg, 27, ""),
    gitUrl: jspb.Message.getFieldWithDefault(msg, 28, ""),
    hooksUrl: jspb.Message.getFieldWithDefault(msg, 29, ""),
    issueCommentUrl: jspb.Message.getFieldWithDefault(msg, 30, ""),
    issueEventsUrl: jspb.Message.getFieldWithDefault(msg, 31, ""),
    issuesUrl: jspb.Message.getFieldWithDefault(msg, 32, ""),
    keysUrl: jspb.Message.getFieldWithDefault(msg, 33, ""),
    labelsUrl: jspb.Message.getFieldWithDefault(msg, 34, ""),
    languagesUrl: jspb.Message.getFieldWithDefault(msg, 35, ""),
    mergesUrl: jspb.Message.getFieldWithDefault(msg, 36, ""),
    milestonesUrl: jspb.Message.getFieldWithDefault(msg, 37, ""),
    mirrorUrl: jspb.Message.getFieldWithDefault(msg, 38, ""),
    notificationsUrl: jspb.Message.getFieldWithDefault(msg, 39, ""),
    pullsUrl: jspb.Message.getFieldWithDefault(msg, 40, ""),
    releasesUrl: jspb.Message.getFieldWithDefault(msg, 41, ""),
    sshUrl: jspb.Message.getFieldWithDefault(msg, 42, ""),
    stargazersUrl: jspb.Message.getFieldWithDefault(msg, 43, ""),
    statusesUrl: jspb.Message.getFieldWithDefault(msg, 44, ""),
    subscribersUrl: jspb.Message.getFieldWithDefault(msg, 45, ""),
    subscriptionUrl: jspb.Message.getFieldWithDefault(msg, 46, ""),
    svnUrl: jspb.Message.getFieldWithDefault(msg, 47, ""),
    tagsUrl: jspb.Message.getFieldWithDefault(msg, 48, ""),
    teamsUrl: jspb.Message.getFieldWithDefault(msg, 49, ""),
    treesUrl: jspb.Message.getFieldWithDefault(msg, 50, ""),
    homepage: jspb.Message.getFieldWithDefault(msg, 51, ""),
    language: jspb.Message.getFieldWithDefault(msg, 52, ""),
    forksCount: jspb.Message.getFieldWithDefault(msg, 53, 0),
    stargazersCount: jspb.Message.getFieldWithDefault(msg, 54, 0),
    watchersCount: jspb.Message.getFieldWithDefault(msg, 55, 0),
    networkCount: jspb.Message.getFieldWithDefault(msg, 56, 0),
    size: jspb.Message.getFieldWithDefault(msg, 57, 0),
    defaultBranch: jspb.Message.getFieldWithDefault(msg, 58, ""),
    openIssuesCount: jspb.Message.getFieldWithDefault(msg, 59, 0),
    hasIssues: jspb.Message.getFieldWithDefault(msg, 60, false),
    hasWiki: jspb.Message.getFieldWithDefault(msg, 61, false),
    hasPages: jspb.Message.getFieldWithDefault(msg, 62, false),
    hasDownloads: jspb.Message.getFieldWithDefault(msg, 63, false),
    pushedAt: jspb.Message.getFieldWithDefault(msg, 64, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 65, ""),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 66, ""),
    permissions: (f = msg.getPermissions()) && proto.github.RepositoryPermission.toObject(includeInstance, f),
    subscribersCount: jspb.Message.getFieldWithDefault(msg, 68, 0),
    organization: (f = msg.getOrganization()) && user_pb.User.toObject(includeInstance, f),
    parent: (f = msg.getParent()) && proto.github.Repository.toObject(includeInstance, f),
    source: (f = msg.getSource()) && proto.github.Repository.toObject(includeInstance, f),
    allowRebaseMerge: jspb.Message.getFieldWithDefault(msg, 72, false),
    allowSquashMerge: jspb.Message.getFieldWithDefault(msg, 73, false),
    allowMergeCommit: jspb.Message.getFieldWithDefault(msg, 74, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.Repository}
 */
proto.github.Repository.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.Repository;
  return proto.github.Repository.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.Repository} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.Repository}
 */
proto.github.Repository.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPrivate(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFork(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtmlUrl(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setArchiveUrl(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssigneesUrl(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlobsUrl(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setBranchesUrl(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setCloneUrl(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollaboratorsUrl(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommentsUrl(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitsUrl(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompareUrl(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentsUrl(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setContributorsUrl(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeploymentsUrl(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setDownloadsUrl(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventsUrl(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setForksUrl(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setGitCommitsUrl(value);
      break;
    case 26:
      var value = /** @type {string} */ (reader.readString());
      msg.setGitRefsUrl(value);
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setGitTagsUrl(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setGitUrl(value);
      break;
    case 29:
      var value = /** @type {string} */ (reader.readString());
      msg.setHooksUrl(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssueCommentUrl(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssueEventsUrl(value);
      break;
    case 32:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuesUrl(value);
      break;
    case 33:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeysUrl(value);
      break;
    case 34:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabelsUrl(value);
      break;
    case 35:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguagesUrl(value);
      break;
    case 36:
      var value = /** @type {string} */ (reader.readString());
      msg.setMergesUrl(value);
      break;
    case 37:
      var value = /** @type {string} */ (reader.readString());
      msg.setMilestonesUrl(value);
      break;
    case 38:
      var value = /** @type {string} */ (reader.readString());
      msg.setMirrorUrl(value);
      break;
    case 39:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotificationsUrl(value);
      break;
    case 40:
      var value = /** @type {string} */ (reader.readString());
      msg.setPullsUrl(value);
      break;
    case 41:
      var value = /** @type {string} */ (reader.readString());
      msg.setReleasesUrl(value);
      break;
    case 42:
      var value = /** @type {string} */ (reader.readString());
      msg.setSshUrl(value);
      break;
    case 43:
      var value = /** @type {string} */ (reader.readString());
      msg.setStargazersUrl(value);
      break;
    case 44:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusesUrl(value);
      break;
    case 45:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubscribersUrl(value);
      break;
    case 46:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubscriptionUrl(value);
      break;
    case 47:
      var value = /** @type {string} */ (reader.readString());
      msg.setSvnUrl(value);
      break;
    case 48:
      var value = /** @type {string} */ (reader.readString());
      msg.setTagsUrl(value);
      break;
    case 49:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamsUrl(value);
      break;
    case 50:
      var value = /** @type {string} */ (reader.readString());
      msg.setTreesUrl(value);
      break;
    case 51:
      var value = /** @type {string} */ (reader.readString());
      msg.setHomepage(value);
      break;
    case 52:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 53:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setForksCount(value);
      break;
    case 54:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStargazersCount(value);
      break;
    case 55:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWatchersCount(value);
      break;
    case 56:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNetworkCount(value);
      break;
    case 57:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 58:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultBranch(value);
      break;
    case 59:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOpenIssuesCount(value);
      break;
    case 60:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasIssues(value);
      break;
    case 61:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasWiki(value);
      break;
    case 62:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasPages(value);
      break;
    case 63:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasDownloads(value);
      break;
    case 64:
      var value = /** @type {string} */ (reader.readString());
      msg.setPushedAt(value);
      break;
    case 65:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 66:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedAt(value);
      break;
    case 67:
      var value = new proto.github.RepositoryPermission;
      reader.readMessage(value,proto.github.RepositoryPermission.deserializeBinaryFromReader);
      msg.setPermissions(value);
      break;
    case 68:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSubscribersCount(value);
      break;
    case 69:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setOrganization(value);
      break;
    case 70:
      var value = new proto.github.Repository;
      reader.readMessage(value,proto.github.Repository.deserializeBinaryFromReader);
      msg.setParent(value);
      break;
    case 71:
      var value = new proto.github.Repository;
      reader.readMessage(value,proto.github.Repository.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 72:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowRebaseMerge(value);
      break;
    case 73:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowSquashMerge(value);
      break;
    case 74:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowMergeCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.Repository} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.Repository.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.Repository.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.Repository.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getOwner();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getFullName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getPrivate();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = this.getFork();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getHtmlUrl();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getArchiveUrl();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getAssigneesUrl();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getBlobsUrl();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = this.getBranchesUrl();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = this.getCloneUrl();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = this.getCollaboratorsUrl();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = this.getCommentsUrl();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = this.getCommitsUrl();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = this.getCompareUrl();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = this.getContentsUrl();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = this.getContributorsUrl();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = this.getDeploymentsUrl();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = this.getDownloadsUrl();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = this.getEventsUrl();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = this.getForksUrl();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
  f = this.getGitCommitsUrl();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
  f = this.getGitRefsUrl();
  if (f.length > 0) {
    writer.writeString(
      26,
      f
    );
  }
  f = this.getGitTagsUrl();
  if (f.length > 0) {
    writer.writeString(
      27,
      f
    );
  }
  f = this.getGitUrl();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
  f = this.getHooksUrl();
  if (f.length > 0) {
    writer.writeString(
      29,
      f
    );
  }
  f = this.getIssueCommentUrl();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = this.getIssueEventsUrl();
  if (f.length > 0) {
    writer.writeString(
      31,
      f
    );
  }
  f = this.getIssuesUrl();
  if (f.length > 0) {
    writer.writeString(
      32,
      f
    );
  }
  f = this.getKeysUrl();
  if (f.length > 0) {
    writer.writeString(
      33,
      f
    );
  }
  f = this.getLabelsUrl();
  if (f.length > 0) {
    writer.writeString(
      34,
      f
    );
  }
  f = this.getLanguagesUrl();
  if (f.length > 0) {
    writer.writeString(
      35,
      f
    );
  }
  f = this.getMergesUrl();
  if (f.length > 0) {
    writer.writeString(
      36,
      f
    );
  }
  f = this.getMilestonesUrl();
  if (f.length > 0) {
    writer.writeString(
      37,
      f
    );
  }
  f = this.getMirrorUrl();
  if (f.length > 0) {
    writer.writeString(
      38,
      f
    );
  }
  f = this.getNotificationsUrl();
  if (f.length > 0) {
    writer.writeString(
      39,
      f
    );
  }
  f = this.getPullsUrl();
  if (f.length > 0) {
    writer.writeString(
      40,
      f
    );
  }
  f = this.getReleasesUrl();
  if (f.length > 0) {
    writer.writeString(
      41,
      f
    );
  }
  f = this.getSshUrl();
  if (f.length > 0) {
    writer.writeString(
      42,
      f
    );
  }
  f = this.getStargazersUrl();
  if (f.length > 0) {
    writer.writeString(
      43,
      f
    );
  }
  f = this.getStatusesUrl();
  if (f.length > 0) {
    writer.writeString(
      44,
      f
    );
  }
  f = this.getSubscribersUrl();
  if (f.length > 0) {
    writer.writeString(
      45,
      f
    );
  }
  f = this.getSubscriptionUrl();
  if (f.length > 0) {
    writer.writeString(
      46,
      f
    );
  }
  f = this.getSvnUrl();
  if (f.length > 0) {
    writer.writeString(
      47,
      f
    );
  }
  f = this.getTagsUrl();
  if (f.length > 0) {
    writer.writeString(
      48,
      f
    );
  }
  f = this.getTeamsUrl();
  if (f.length > 0) {
    writer.writeString(
      49,
      f
    );
  }
  f = this.getTreesUrl();
  if (f.length > 0) {
    writer.writeString(
      50,
      f
    );
  }
  f = this.getHomepage();
  if (f.length > 0) {
    writer.writeString(
      51,
      f
    );
  }
  f = this.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      52,
      f
    );
  }
  f = this.getForksCount();
  if (f !== 0) {
    writer.writeInt32(
      53,
      f
    );
  }
  f = this.getStargazersCount();
  if (f !== 0) {
    writer.writeInt32(
      54,
      f
    );
  }
  f = this.getWatchersCount();
  if (f !== 0) {
    writer.writeInt32(
      55,
      f
    );
  }
  f = this.getNetworkCount();
  if (f !== 0) {
    writer.writeInt32(
      56,
      f
    );
  }
  f = this.getSize();
  if (f !== 0) {
    writer.writeInt32(
      57,
      f
    );
  }
  f = this.getDefaultBranch();
  if (f.length > 0) {
    writer.writeString(
      58,
      f
    );
  }
  f = this.getOpenIssuesCount();
  if (f !== 0) {
    writer.writeInt32(
      59,
      f
    );
  }
  f = this.getHasIssues();
  if (f) {
    writer.writeBool(
      60,
      f
    );
  }
  f = this.getHasWiki();
  if (f) {
    writer.writeBool(
      61,
      f
    );
  }
  f = this.getHasPages();
  if (f) {
    writer.writeBool(
      62,
      f
    );
  }
  f = this.getHasDownloads();
  if (f) {
    writer.writeBool(
      63,
      f
    );
  }
  f = this.getPushedAt();
  if (f.length > 0) {
    writer.writeString(
      64,
      f
    );
  }
  f = this.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      65,
      f
    );
  }
  f = this.getUpdatedAt();
  if (f.length > 0) {
    writer.writeString(
      66,
      f
    );
  }
  f = this.getPermissions();
  if (f != null) {
    writer.writeMessage(
      67,
      f,
      proto.github.RepositoryPermission.serializeBinaryToWriter
    );
  }
  f = this.getSubscribersCount();
  if (f !== 0) {
    writer.writeInt32(
      68,
      f
    );
  }
  f = this.getOrganization();
  if (f != null) {
    writer.writeMessage(
      69,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = this.getParent();
  if (f != null) {
    writer.writeMessage(
      70,
      f,
      proto.github.Repository.serializeBinaryToWriter
    );
  }
  f = this.getSource();
  if (f != null) {
    writer.writeMessage(
      71,
      f,
      proto.github.Repository.serializeBinaryToWriter
    );
  }
  f = this.getAllowRebaseMerge();
  if (f) {
    writer.writeBool(
      72,
      f
    );
  }
  f = this.getAllowSquashMerge();
  if (f) {
    writer.writeBool(
      73,
      f
    );
  }
  f = this.getAllowMergeCommit();
  if (f) {
    writer.writeBool(
      74,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.github.Repository.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.github.Repository.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional User owner = 2;
 * @return {?proto.github.User}
 */
proto.github.Repository.prototype.getOwner = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 2));
};


/** @param {?proto.github.User|undefined} value */
proto.github.Repository.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.github.Repository.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Repository.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.github.Repository.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string full_name = 4;
 * @return {string}
 */
proto.github.Repository.prototype.getFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setFullName = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.github.Repository.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool private = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.Repository.prototype.getPrivate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.github.Repository.prototype.setPrivate = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool fork = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.Repository.prototype.getFork = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.github.Repository.prototype.setFork = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string url = 8;
 * @return {string}
 */
proto.github.Repository.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string html_url = 9;
 * @return {string}
 */
proto.github.Repository.prototype.getHtmlUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setHtmlUrl = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string archive_url = 10;
 * @return {string}
 */
proto.github.Repository.prototype.getArchiveUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setArchiveUrl = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string assignees_url = 11;
 * @return {string}
 */
proto.github.Repository.prototype.getAssigneesUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setAssigneesUrl = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string blobs_url = 12;
 * @return {string}
 */
proto.github.Repository.prototype.getBlobsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setBlobsUrl = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string branches_url = 13;
 * @return {string}
 */
proto.github.Repository.prototype.getBranchesUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setBranchesUrl = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string clone_url = 14;
 * @return {string}
 */
proto.github.Repository.prototype.getCloneUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setCloneUrl = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string collaborators_url = 15;
 * @return {string}
 */
proto.github.Repository.prototype.getCollaboratorsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setCollaboratorsUrl = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional string comments_url = 16;
 * @return {string}
 */
proto.github.Repository.prototype.getCommentsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setCommentsUrl = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional string commits_url = 17;
 * @return {string}
 */
proto.github.Repository.prototype.getCommitsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setCommitsUrl = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional string compare_url = 18;
 * @return {string}
 */
proto.github.Repository.prototype.getCompareUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setCompareUrl = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional string contents_url = 19;
 * @return {string}
 */
proto.github.Repository.prototype.getContentsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setContentsUrl = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional string contributors_url = 20;
 * @return {string}
 */
proto.github.Repository.prototype.getContributorsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setContributorsUrl = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * optional string deployments_url = 21;
 * @return {string}
 */
proto.github.Repository.prototype.getDeploymentsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setDeploymentsUrl = function(value) {
  jspb.Message.setField(this, 21, value);
};


/**
 * optional string downloads_url = 22;
 * @return {string}
 */
proto.github.Repository.prototype.getDownloadsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setDownloadsUrl = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * optional string events_url = 23;
 * @return {string}
 */
proto.github.Repository.prototype.getEventsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setEventsUrl = function(value) {
  jspb.Message.setField(this, 23, value);
};


/**
 * optional string forks_url = 24;
 * @return {string}
 */
proto.github.Repository.prototype.getForksUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setForksUrl = function(value) {
  jspb.Message.setField(this, 24, value);
};


/**
 * optional string git_commits_url = 25;
 * @return {string}
 */
proto.github.Repository.prototype.getGitCommitsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setGitCommitsUrl = function(value) {
  jspb.Message.setField(this, 25, value);
};


/**
 * optional string git_refs_url = 26;
 * @return {string}
 */
proto.github.Repository.prototype.getGitRefsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setGitRefsUrl = function(value) {
  jspb.Message.setField(this, 26, value);
};


/**
 * optional string git_tags_url = 27;
 * @return {string}
 */
proto.github.Repository.prototype.getGitTagsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setGitTagsUrl = function(value) {
  jspb.Message.setField(this, 27, value);
};


/**
 * optional string git_url = 28;
 * @return {string}
 */
proto.github.Repository.prototype.getGitUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setGitUrl = function(value) {
  jspb.Message.setField(this, 28, value);
};


/**
 * optional string hooks_url = 29;
 * @return {string}
 */
proto.github.Repository.prototype.getHooksUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 29, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setHooksUrl = function(value) {
  jspb.Message.setField(this, 29, value);
};


/**
 * optional string issue_comment_url = 30;
 * @return {string}
 */
proto.github.Repository.prototype.getIssueCommentUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setIssueCommentUrl = function(value) {
  jspb.Message.setField(this, 30, value);
};


/**
 * optional string issue_events_url = 31;
 * @return {string}
 */
proto.github.Repository.prototype.getIssueEventsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setIssueEventsUrl = function(value) {
  jspb.Message.setField(this, 31, value);
};


/**
 * optional string issues_url = 32;
 * @return {string}
 */
proto.github.Repository.prototype.getIssuesUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 32, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setIssuesUrl = function(value) {
  jspb.Message.setField(this, 32, value);
};


/**
 * optional string keys_url = 33;
 * @return {string}
 */
proto.github.Repository.prototype.getKeysUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 33, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setKeysUrl = function(value) {
  jspb.Message.setField(this, 33, value);
};


/**
 * optional string labels_url = 34;
 * @return {string}
 */
proto.github.Repository.prototype.getLabelsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 34, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setLabelsUrl = function(value) {
  jspb.Message.setField(this, 34, value);
};


/**
 * optional string languages_url = 35;
 * @return {string}
 */
proto.github.Repository.prototype.getLanguagesUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 35, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setLanguagesUrl = function(value) {
  jspb.Message.setField(this, 35, value);
};


/**
 * optional string merges_url = 36;
 * @return {string}
 */
proto.github.Repository.prototype.getMergesUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 36, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setMergesUrl = function(value) {
  jspb.Message.setField(this, 36, value);
};


/**
 * optional string milestones_url = 37;
 * @return {string}
 */
proto.github.Repository.prototype.getMilestonesUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 37, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setMilestonesUrl = function(value) {
  jspb.Message.setField(this, 37, value);
};


/**
 * optional string mirror_url = 38;
 * @return {string}
 */
proto.github.Repository.prototype.getMirrorUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 38, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setMirrorUrl = function(value) {
  jspb.Message.setField(this, 38, value);
};


/**
 * optional string notifications_url = 39;
 * @return {string}
 */
proto.github.Repository.prototype.getNotificationsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 39, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setNotificationsUrl = function(value) {
  jspb.Message.setField(this, 39, value);
};


/**
 * optional string pulls_url = 40;
 * @return {string}
 */
proto.github.Repository.prototype.getPullsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 40, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setPullsUrl = function(value) {
  jspb.Message.setField(this, 40, value);
};


/**
 * optional string releases_url = 41;
 * @return {string}
 */
proto.github.Repository.prototype.getReleasesUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 41, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setReleasesUrl = function(value) {
  jspb.Message.setField(this, 41, value);
};


/**
 * optional string ssh_url = 42;
 * @return {string}
 */
proto.github.Repository.prototype.getSshUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 42, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setSshUrl = function(value) {
  jspb.Message.setField(this, 42, value);
};


/**
 * optional string stargazers_url = 43;
 * @return {string}
 */
proto.github.Repository.prototype.getStargazersUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 43, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setStargazersUrl = function(value) {
  jspb.Message.setField(this, 43, value);
};


/**
 * optional string statuses_url = 44;
 * @return {string}
 */
proto.github.Repository.prototype.getStatusesUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 44, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setStatusesUrl = function(value) {
  jspb.Message.setField(this, 44, value);
};


/**
 * optional string subscribers_url = 45;
 * @return {string}
 */
proto.github.Repository.prototype.getSubscribersUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 45, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setSubscribersUrl = function(value) {
  jspb.Message.setField(this, 45, value);
};


/**
 * optional string subscription_url = 46;
 * @return {string}
 */
proto.github.Repository.prototype.getSubscriptionUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 46, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setSubscriptionUrl = function(value) {
  jspb.Message.setField(this, 46, value);
};


/**
 * optional string svn_url = 47;
 * @return {string}
 */
proto.github.Repository.prototype.getSvnUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 47, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setSvnUrl = function(value) {
  jspb.Message.setField(this, 47, value);
};


/**
 * optional string tags_url = 48;
 * @return {string}
 */
proto.github.Repository.prototype.getTagsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 48, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setTagsUrl = function(value) {
  jspb.Message.setField(this, 48, value);
};


/**
 * optional string teams_url = 49;
 * @return {string}
 */
proto.github.Repository.prototype.getTeamsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 49, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setTeamsUrl = function(value) {
  jspb.Message.setField(this, 49, value);
};


/**
 * optional string trees_url = 50;
 * @return {string}
 */
proto.github.Repository.prototype.getTreesUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setTreesUrl = function(value) {
  jspb.Message.setField(this, 50, value);
};


/**
 * optional string homepage = 51;
 * @return {string}
 */
proto.github.Repository.prototype.getHomepage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setHomepage = function(value) {
  jspb.Message.setField(this, 51, value);
};


/**
 * optional string language = 52;
 * @return {string}
 */
proto.github.Repository.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 52, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setLanguage = function(value) {
  jspb.Message.setField(this, 52, value);
};


/**
 * optional int32 forks_count = 53;
 * @return {number}
 */
proto.github.Repository.prototype.getForksCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 53, 0));
};


/** @param {number} value */
proto.github.Repository.prototype.setForksCount = function(value) {
  jspb.Message.setField(this, 53, value);
};


/**
 * optional int32 stargazers_count = 54;
 * @return {number}
 */
proto.github.Repository.prototype.getStargazersCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 54, 0));
};


/** @param {number} value */
proto.github.Repository.prototype.setStargazersCount = function(value) {
  jspb.Message.setField(this, 54, value);
};


/**
 * optional int32 watchers_count = 55;
 * @return {number}
 */
proto.github.Repository.prototype.getWatchersCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 55, 0));
};


/** @param {number} value */
proto.github.Repository.prototype.setWatchersCount = function(value) {
  jspb.Message.setField(this, 55, value);
};


/**
 * optional int32 network_count = 56;
 * @return {number}
 */
proto.github.Repository.prototype.getNetworkCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 56, 0));
};


/** @param {number} value */
proto.github.Repository.prototype.setNetworkCount = function(value) {
  jspb.Message.setField(this, 56, value);
};


/**
 * optional int32 size = 57;
 * @return {number}
 */
proto.github.Repository.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 57, 0));
};


/** @param {number} value */
proto.github.Repository.prototype.setSize = function(value) {
  jspb.Message.setField(this, 57, value);
};


/**
 * optional string default_branch = 58;
 * @return {string}
 */
proto.github.Repository.prototype.getDefaultBranch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 58, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setDefaultBranch = function(value) {
  jspb.Message.setField(this, 58, value);
};


/**
 * optional int32 open_issues_count = 59;
 * @return {number}
 */
proto.github.Repository.prototype.getOpenIssuesCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 59, 0));
};


/** @param {number} value */
proto.github.Repository.prototype.setOpenIssuesCount = function(value) {
  jspb.Message.setField(this, 59, value);
};


/**
 * optional bool has_issues = 60;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.Repository.prototype.getHasIssues = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 60, false));
};


/** @param {boolean} value */
proto.github.Repository.prototype.setHasIssues = function(value) {
  jspb.Message.setField(this, 60, value);
};


/**
 * optional bool has_wiki = 61;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.Repository.prototype.getHasWiki = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 61, false));
};


/** @param {boolean} value */
proto.github.Repository.prototype.setHasWiki = function(value) {
  jspb.Message.setField(this, 61, value);
};


/**
 * optional bool has_pages = 62;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.Repository.prototype.getHasPages = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 62, false));
};


/** @param {boolean} value */
proto.github.Repository.prototype.setHasPages = function(value) {
  jspb.Message.setField(this, 62, value);
};


/**
 * optional bool has_downloads = 63;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.Repository.prototype.getHasDownloads = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 63, false));
};


/** @param {boolean} value */
proto.github.Repository.prototype.setHasDownloads = function(value) {
  jspb.Message.setField(this, 63, value);
};


/**
 * optional string pushed_at = 64;
 * @return {string}
 */
proto.github.Repository.prototype.getPushedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 64, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setPushedAt = function(value) {
  jspb.Message.setField(this, 64, value);
};


/**
 * optional string created_at = 65;
 * @return {string}
 */
proto.github.Repository.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 65, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setCreatedAt = function(value) {
  jspb.Message.setField(this, 65, value);
};


/**
 * optional string updated_at = 66;
 * @return {string}
 */
proto.github.Repository.prototype.getUpdatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 66, ""));
};


/** @param {string} value */
proto.github.Repository.prototype.setUpdatedAt = function(value) {
  jspb.Message.setField(this, 66, value);
};


/**
 * optional RepositoryPermission permissions = 67;
 * @return {?proto.github.RepositoryPermission}
 */
proto.github.Repository.prototype.getPermissions = function() {
  return /** @type{?proto.github.RepositoryPermission} */ (
    jspb.Message.getWrapperField(this, proto.github.RepositoryPermission, 67));
};


/** @param {?proto.github.RepositoryPermission|undefined} value */
proto.github.Repository.prototype.setPermissions = function(value) {
  jspb.Message.setWrapperField(this, 67, value);
};


proto.github.Repository.prototype.clearPermissions = function() {
  this.setPermissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Repository.prototype.hasPermissions = function() {
  return jspb.Message.getField(this, 67) != null;
};


/**
 * optional int32 subscribers_count = 68;
 * @return {number}
 */
proto.github.Repository.prototype.getSubscribersCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 68, 0));
};


/** @param {number} value */
proto.github.Repository.prototype.setSubscribersCount = function(value) {
  jspb.Message.setField(this, 68, value);
};


/**
 * optional User organization = 69;
 * @return {?proto.github.User}
 */
proto.github.Repository.prototype.getOrganization = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 69));
};


/** @param {?proto.github.User|undefined} value */
proto.github.Repository.prototype.setOrganization = function(value) {
  jspb.Message.setWrapperField(this, 69, value);
};


proto.github.Repository.prototype.clearOrganization = function() {
  this.setOrganization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Repository.prototype.hasOrganization = function() {
  return jspb.Message.getField(this, 69) != null;
};


/**
 * optional Repository parent = 70;
 * @return {?proto.github.Repository}
 */
proto.github.Repository.prototype.getParent = function() {
  return /** @type{?proto.github.Repository} */ (
    jspb.Message.getWrapperField(this, proto.github.Repository, 70));
};


/** @param {?proto.github.Repository|undefined} value */
proto.github.Repository.prototype.setParent = function(value) {
  jspb.Message.setWrapperField(this, 70, value);
};


proto.github.Repository.prototype.clearParent = function() {
  this.setParent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Repository.prototype.hasParent = function() {
  return jspb.Message.getField(this, 70) != null;
};


/**
 * optional Repository source = 71;
 * @return {?proto.github.Repository}
 */
proto.github.Repository.prototype.getSource = function() {
  return /** @type{?proto.github.Repository} */ (
    jspb.Message.getWrapperField(this, proto.github.Repository, 71));
};


/** @param {?proto.github.Repository|undefined} value */
proto.github.Repository.prototype.setSource = function(value) {
  jspb.Message.setWrapperField(this, 71, value);
};


proto.github.Repository.prototype.clearSource = function() {
  this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Repository.prototype.hasSource = function() {
  return jspb.Message.getField(this, 71) != null;
};


/**
 * optional bool allow_rebase_merge = 72;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.Repository.prototype.getAllowRebaseMerge = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 72, false));
};


/** @param {boolean} value */
proto.github.Repository.prototype.setAllowRebaseMerge = function(value) {
  jspb.Message.setField(this, 72, value);
};


/**
 * optional bool allow_squash_merge = 73;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.Repository.prototype.getAllowSquashMerge = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 73, false));
};


/** @param {boolean} value */
proto.github.Repository.prototype.setAllowSquashMerge = function(value) {
  jspb.Message.setField(this, 73, value);
};


/**
 * optional bool allow_merge_commit = 74;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.Repository.prototype.getAllowMergeCommit = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 74, false));
};


/** @param {boolean} value */
proto.github.Repository.prototype.setAllowMergeCommit = function(value) {
  jspb.Message.setField(this, 74, value);
};


goog.object.extend(exports, proto.github);


// patched by github-protobuf to add toJSON and fromJSON methods

function _toBool (obj) {
	if (typeof(obj) === 'boolean') { return obj; }
	if (typeof(obj) === 'string') { return obj === 'true'; }
	if (typeof(obj) === 'number') { return obj > 0; }
	return false;
};



// .github.RepositoryPermission
proto.github.RepositoryPermission.prototype.fromJSON = function(obj) {
	'admin' in obj && this.setAdmin(_toBool(obj.admin));
	'push' in obj && this.setPush(_toBool(obj.push));
	'pull' in obj && this.setPull(_toBool(obj.pull));
	return this;
};

proto.github.RepositoryPermission.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('admin' in obj) {
		obj.admin = obj.admin;
		delete obj.admin;
	}
	if ('push' in obj) {
		obj.push = obj.push;
		delete obj.push;
	}
	if ('pull' in obj) {
		obj.pull = obj.pull;
		delete obj.pull;
	}
	return obj;
};



// .github.Repository
proto.github.Repository.prototype.fromJSON = function(obj) {
	'id' in obj && this.setId(+obj.id);
	if ('owner' in obj) {
		var User = require('./user_pb.js').User;
		var UserInstance = new User();
		this.setOwner(UserInstance.fromJSON(obj.owner));
	}
	'name' in obj && this.setName(obj.name);
	'full_name' in obj && this.setFullName(obj.full_name);
	'description' in obj && this.setDescription(obj.description);
	'private' in obj && this.setPrivate(_toBool(obj.private));
	'fork' in obj && this.setFork(_toBool(obj.fork));
	'url' in obj && this.setUrl(obj.url);
	'html_url' in obj && this.setHtmlUrl(obj.html_url);
	'archive_url' in obj && this.setArchiveUrl(obj.archive_url);
	'assignees_url' in obj && this.setAssigneesUrl(obj.assignees_url);
	'blobs_url' in obj && this.setBlobsUrl(obj.blobs_url);
	'branches_url' in obj && this.setBranchesUrl(obj.branches_url);
	'clone_url' in obj && this.setCloneUrl(obj.clone_url);
	'collaborators_url' in obj && this.setCollaboratorsUrl(obj.collaborators_url);
	'comments_url' in obj && this.setCommentsUrl(obj.comments_url);
	'commits_url' in obj && this.setCommitsUrl(obj.commits_url);
	'compare_url' in obj && this.setCompareUrl(obj.compare_url);
	'contents_url' in obj && this.setContentsUrl(obj.contents_url);
	'contributors_url' in obj && this.setContributorsUrl(obj.contributors_url);
	'deployments_url' in obj && this.setDeploymentsUrl(obj.deployments_url);
	'downloads_url' in obj && this.setDownloadsUrl(obj.downloads_url);
	'events_url' in obj && this.setEventsUrl(obj.events_url);
	'forks_url' in obj && this.setForksUrl(obj.forks_url);
	'git_commits_url' in obj && this.setGitCommitsUrl(obj.git_commits_url);
	'git_refs_url' in obj && this.setGitRefsUrl(obj.git_refs_url);
	'git_tags_url' in obj && this.setGitTagsUrl(obj.git_tags_url);
	'git_url' in obj && this.setGitUrl(obj.git_url);
	'hooks_url' in obj && this.setHooksUrl(obj.hooks_url);
	'issue_comment_url' in obj && this.setIssueCommentUrl(obj.issue_comment_url);
	'issue_events_url' in obj && this.setIssueEventsUrl(obj.issue_events_url);
	'issues_url' in obj && this.setIssuesUrl(obj.issues_url);
	'keys_url' in obj && this.setKeysUrl(obj.keys_url);
	'labels_url' in obj && this.setLabelsUrl(obj.labels_url);
	'languages_url' in obj && this.setLanguagesUrl(obj.languages_url);
	'merges_url' in obj && this.setMergesUrl(obj.merges_url);
	'milestones_url' in obj && this.setMilestonesUrl(obj.milestones_url);
	'mirror_url' in obj && this.setMirrorUrl(obj.mirror_url);
	'notifications_url' in obj && this.setNotificationsUrl(obj.notifications_url);
	'pulls_url' in obj && this.setPullsUrl(obj.pulls_url);
	'releases_url' in obj && this.setReleasesUrl(obj.releases_url);
	'ssh_url' in obj && this.setSshUrl(obj.ssh_url);
	'stargazers_url' in obj && this.setStargazersUrl(obj.stargazers_url);
	'statuses_url' in obj && this.setStatusesUrl(obj.statuses_url);
	'subscribers_url' in obj && this.setSubscribersUrl(obj.subscribers_url);
	'subscription_url' in obj && this.setSubscriptionUrl(obj.subscription_url);
	'svn_url' in obj && this.setSvnUrl(obj.svn_url);
	'tags_url' in obj && this.setTagsUrl(obj.tags_url);
	'teams_url' in obj && this.setTeamsUrl(obj.teams_url);
	'trees_url' in obj && this.setTreesUrl(obj.trees_url);
	'homepage' in obj && this.setHomepage(obj.homepage);
	'language' in obj && this.setLanguage(obj.language);
	'forks_count' in obj && this.setForksCount(+obj.forks_count);
	'stargazers_count' in obj && this.setStargazersCount(+obj.stargazers_count);
	'watchers_count' in obj && this.setWatchersCount(+obj.watchers_count);
	'network_count' in obj && this.setNetworkCount(+obj.network_count);
	'RepoSize' in obj && this.setRepoSize(+obj.RepoSize);
	'default_branch' in obj && this.setDefaultBranch(obj.default_branch);
	'open_issues_count' in obj && this.setOpenIssuesCount(+obj.open_issues_count);
	'has_issues' in obj && this.setHasIssues(_toBool(obj.has_issues));
	'has_wiki' in obj && this.setHasWiki(_toBool(obj.has_wiki));
	'has_pages' in obj && this.setHasPages(_toBool(obj.has_pages));
	'has_downloads' in obj && this.setHasDownloads(_toBool(obj.has_downloads));
	'pushed_at' in obj && this.setPushedAt(obj.pushed_at);
	'created_at' in obj && this.setCreatedAt(obj.created_at);
	'updated_at' in obj && this.setUpdatedAt(obj.updated_at);
	if ('permissions' in obj) {
		var RepositoryPermission = require('./repository_pb.js').RepositoryPermission;
		var RepositoryPermissionInstance = new RepositoryPermission();
		this.setPermissions(RepositoryPermissionInstance.fromJSON(obj.permissions));
	}
	'subscribers_count' in obj && this.setSubscribersCount(+obj.subscribers_count);
	if ('organization' in obj) {
		var User = require('./user_pb.js').User;
		var UserInstance = new User();
		this.setOrganization(UserInstance.fromJSON(obj.organization));
	}
	if ('parent' in obj) {
		var Repository = require('./repository_pb.js').Repository;
		var RepositoryInstance = new Repository();
		this.setParent(RepositoryInstance.fromJSON(obj.parent));
	}
	if ('source' in obj) {
		var Repository = require('./repository_pb.js').Repository;
		var RepositoryInstance = new Repository();
		this.setSource(RepositoryInstance.fromJSON(obj.source));
	}
	'allow_rebase_merge' in obj && this.setAllowRebaseMerge(_toBool(obj.allow_rebase_merge));
	'allow_squash_merge' in obj && this.setAllowSquashMerge(_toBool(obj.allow_squash_merge));
	'allow_merge_commit' in obj && this.setAllowMergeCommit(_toBool(obj.allow_merge_commit));
	return this;
};

proto.github.Repository.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('id' in obj) {
		obj.id = obj.id;
		delete obj.id;
	}
	if ('owner' in obj) {
		obj.owner = this.getOwner().toJSON();
	}
	if ('name' in obj) {
		obj.name = obj.name;
		delete obj.name;
	}
	if ('fullName' in obj) {
		obj.full_name = obj.fullName;
		delete obj.fullName;
	}
	if ('description' in obj) {
		obj.description = obj.description;
		delete obj.description;
	}
	if ('private' in obj) {
		obj.private = obj.private;
		delete obj.private;
	}
	if ('fork' in obj) {
		obj.fork = obj.fork;
		delete obj.fork;
	}
	if ('url' in obj) {
		obj.url = obj.url;
		delete obj.url;
	}
	if ('htmlUrl' in obj) {
		obj.html_url = obj.htmlUrl;
		delete obj.htmlUrl;
	}
	if ('archiveUrl' in obj) {
		obj.archive_url = obj.archiveUrl;
		delete obj.archiveUrl;
	}
	if ('assigneesUrl' in obj) {
		obj.assignees_url = obj.assigneesUrl;
		delete obj.assigneesUrl;
	}
	if ('blobsUrl' in obj) {
		obj.blobs_url = obj.blobsUrl;
		delete obj.blobsUrl;
	}
	if ('branchesUrl' in obj) {
		obj.branches_url = obj.branchesUrl;
		delete obj.branchesUrl;
	}
	if ('cloneUrl' in obj) {
		obj.clone_url = obj.cloneUrl;
		delete obj.cloneUrl;
	}
	if ('collaboratorsUrl' in obj) {
		obj.collaborators_url = obj.collaboratorsUrl;
		delete obj.collaboratorsUrl;
	}
	if ('commentsUrl' in obj) {
		obj.comments_url = obj.commentsUrl;
		delete obj.commentsUrl;
	}
	if ('commitsUrl' in obj) {
		obj.commits_url = obj.commitsUrl;
		delete obj.commitsUrl;
	}
	if ('compareUrl' in obj) {
		obj.compare_url = obj.compareUrl;
		delete obj.compareUrl;
	}
	if ('contentsUrl' in obj) {
		obj.contents_url = obj.contentsUrl;
		delete obj.contentsUrl;
	}
	if ('contributorsUrl' in obj) {
		obj.contributors_url = obj.contributorsUrl;
		delete obj.contributorsUrl;
	}
	if ('deploymentsUrl' in obj) {
		obj.deployments_url = obj.deploymentsUrl;
		delete obj.deploymentsUrl;
	}
	if ('downloadsUrl' in obj) {
		obj.downloads_url = obj.downloadsUrl;
		delete obj.downloadsUrl;
	}
	if ('eventsUrl' in obj) {
		obj.events_url = obj.eventsUrl;
		delete obj.eventsUrl;
	}
	if ('forksUrl' in obj) {
		obj.forks_url = obj.forksUrl;
		delete obj.forksUrl;
	}
	if ('gitCommitsUrl' in obj) {
		obj.git_commits_url = obj.gitCommitsUrl;
		delete obj.gitCommitsUrl;
	}
	if ('gitRefsUrl' in obj) {
		obj.git_refs_url = obj.gitRefsUrl;
		delete obj.gitRefsUrl;
	}
	if ('gitTagsUrl' in obj) {
		obj.git_tags_url = obj.gitTagsUrl;
		delete obj.gitTagsUrl;
	}
	if ('gitUrl' in obj) {
		obj.git_url = obj.gitUrl;
		delete obj.gitUrl;
	}
	if ('hooksUrl' in obj) {
		obj.hooks_url = obj.hooksUrl;
		delete obj.hooksUrl;
	}
	if ('issueCommentUrl' in obj) {
		obj.issue_comment_url = obj.issueCommentUrl;
		delete obj.issueCommentUrl;
	}
	if ('issueEventsUrl' in obj) {
		obj.issue_events_url = obj.issueEventsUrl;
		delete obj.issueEventsUrl;
	}
	if ('issuesUrl' in obj) {
		obj.issues_url = obj.issuesUrl;
		delete obj.issuesUrl;
	}
	if ('keysUrl' in obj) {
		obj.keys_url = obj.keysUrl;
		delete obj.keysUrl;
	}
	if ('labelsUrl' in obj) {
		obj.labels_url = obj.labelsUrl;
		delete obj.labelsUrl;
	}
	if ('languagesUrl' in obj) {
		obj.languages_url = obj.languagesUrl;
		delete obj.languagesUrl;
	}
	if ('mergesUrl' in obj) {
		obj.merges_url = obj.mergesUrl;
		delete obj.mergesUrl;
	}
	if ('milestonesUrl' in obj) {
		obj.milestones_url = obj.milestonesUrl;
		delete obj.milestonesUrl;
	}
	if ('mirrorUrl' in obj) {
		obj.mirror_url = obj.mirrorUrl;
		delete obj.mirrorUrl;
	}
	if ('notificationsUrl' in obj) {
		obj.notifications_url = obj.notificationsUrl;
		delete obj.notificationsUrl;
	}
	if ('pullsUrl' in obj) {
		obj.pulls_url = obj.pullsUrl;
		delete obj.pullsUrl;
	}
	if ('releasesUrl' in obj) {
		obj.releases_url = obj.releasesUrl;
		delete obj.releasesUrl;
	}
	if ('sshUrl' in obj) {
		obj.ssh_url = obj.sshUrl;
		delete obj.sshUrl;
	}
	if ('stargazersUrl' in obj) {
		obj.stargazers_url = obj.stargazersUrl;
		delete obj.stargazersUrl;
	}
	if ('statusesUrl' in obj) {
		obj.statuses_url = obj.statusesUrl;
		delete obj.statusesUrl;
	}
	if ('subscribersUrl' in obj) {
		obj.subscribers_url = obj.subscribersUrl;
		delete obj.subscribersUrl;
	}
	if ('subscriptionUrl' in obj) {
		obj.subscription_url = obj.subscriptionUrl;
		delete obj.subscriptionUrl;
	}
	if ('svnUrl' in obj) {
		obj.svn_url = obj.svnUrl;
		delete obj.svnUrl;
	}
	if ('tagsUrl' in obj) {
		obj.tags_url = obj.tagsUrl;
		delete obj.tagsUrl;
	}
	if ('teamsUrl' in obj) {
		obj.teams_url = obj.teamsUrl;
		delete obj.teamsUrl;
	}
	if ('treesUrl' in obj) {
		obj.trees_url = obj.treesUrl;
		delete obj.treesUrl;
	}
	if ('homepage' in obj) {
		obj.homepage = obj.homepage;
		delete obj.homepage;
	}
	if ('language' in obj) {
		obj.language = obj.language;
		delete obj.language;
	}
	if ('forksCount' in obj) {
		obj.forks_count = obj.forksCount;
		delete obj.forksCount;
	}
	if ('stargazersCount' in obj) {
		obj.stargazers_count = obj.stargazersCount;
		delete obj.stargazersCount;
	}
	if ('watchersCount' in obj) {
		obj.watchers_count = obj.watchersCount;
		delete obj.watchersCount;
	}
	if ('networkCount' in obj) {
		obj.network_count = obj.networkCount;
		delete obj.networkCount;
	}
	if ('size' in obj) {
		obj.size = obj.size;
		delete obj.size;
	}
	if ('defaultBranch' in obj) {
		obj.default_branch = obj.defaultBranch;
		delete obj.defaultBranch;
	}
	if ('openIssuesCount' in obj) {
		obj.open_issues_count = obj.openIssuesCount;
		delete obj.openIssuesCount;
	}
	if ('hasIssues' in obj) {
		obj.has_issues = obj.hasIssues;
		delete obj.hasIssues;
	}
	if ('hasWiki' in obj) {
		obj.has_wiki = obj.hasWiki;
		delete obj.hasWiki;
	}
	if ('hasPages' in obj) {
		obj.has_pages = obj.hasPages;
		delete obj.hasPages;
	}
	if ('hasDownloads' in obj) {
		obj.has_downloads = obj.hasDownloads;
		delete obj.hasDownloads;
	}
	if ('pushedAt' in obj) {
		obj.pushed_at = obj.pushedAt;
		delete obj.pushedAt;
	}
	if ('createdAt' in obj) {
		obj.created_at = obj.createdAt;
		delete obj.createdAt;
	}
	if ('updatedAt' in obj) {
		obj.updated_at = obj.updatedAt;
		delete obj.updatedAt;
	}
	if ('permissions' in obj) {
		obj.permissions = this.getPermissions().toJSON();
	}
	if ('subscribersCount' in obj) {
		obj.subscribers_count = obj.subscribersCount;
		delete obj.subscribersCount;
	}
	if ('organization' in obj) {
		obj.organization = this.getOrganization().toJSON();
	}
	if ('parent' in obj) {
		obj.parent = this.getParent().toJSON();
	}
	if ('source' in obj) {
		obj.source = this.getSource().toJSON();
	}
	if ('allowRebaseMerge' in obj) {
		obj.allow_rebase_merge = obj.allowRebaseMerge;
		delete obj.allowRebaseMerge;
	}
	if ('allowSquashMerge' in obj) {
		obj.allow_squash_merge = obj.allowSquashMerge;
		delete obj.allowSquashMerge;
	}
	if ('allowMergeCommit' in obj) {
		obj.allow_merge_commit = obj.allowMergeCommit;
		delete obj.allowMergeCommit;
	}
	return obj;
};

