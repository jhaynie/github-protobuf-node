/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var user_pb = require('./user_pb.js');
var repository_pb = require('./repository_pb.js');
var commit_user_pb = require('./commit_user_pb.js');
goog.exportSymbol('proto.github.Commit', null, global);
goog.exportSymbol('proto.github.CommitDetail', null, global);
goog.exportSymbol('proto.github.CommitDetailTree', null, global);
goog.exportSymbol('proto.github.CommitFileDetail', null, global);
goog.exportSymbol('proto.github.CommitFramework', null, global);
goog.exportSymbol('proto.github.CommitLicense', null, global);
goog.exportSymbol('proto.github.CommitLinguist', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.CommitDetailTree = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.CommitDetailTree, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.CommitDetailTree.displayName = 'proto.github.CommitDetailTree';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.CommitDetailTree.prototype.toObject = function(opt_includeInstance) {
  return proto.github.CommitDetailTree.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.CommitDetailTree} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.CommitDetailTree.toObject = function(includeInstance, msg) {
  var f, obj = {
    sha: jspb.Message.getFieldWithDefault(msg, 1, ""),
    url: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.CommitDetailTree}
 */
proto.github.CommitDetailTree.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.CommitDetailTree;
  return proto.github.CommitDetailTree.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.CommitDetailTree} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.CommitDetailTree}
 */
proto.github.CommitDetailTree.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSha(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.CommitDetailTree} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.CommitDetailTree.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.CommitDetailTree.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.CommitDetailTree.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSha();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string sha = 1;
 * @return {string}
 */
proto.github.CommitDetailTree.prototype.getSha = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.CommitDetailTree.prototype.setSha = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.github.CommitDetailTree.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.CommitDetailTree.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.CommitLinguist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.CommitLinguist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.CommitLinguist.displayName = 'proto.github.CommitLinguist';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.CommitLinguist.prototype.toObject = function(opt_includeInstance) {
  return proto.github.CommitLinguist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.CommitLinguist} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.CommitLinguist.toObject = function(includeInstance, msg) {
  var f, obj = {
    contentType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    disposition: jspb.Message.getFieldWithDefault(msg, 2, ""),
    extname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isBinary: jspb.Message.getFieldWithDefault(msg, 4, false),
    isDocumentation: jspb.Message.getFieldWithDefault(msg, 5, false),
    isGenerated: jspb.Message.getFieldWithDefault(msg, 6, false),
    isHighRatioOfLongLines: jspb.Message.getFieldWithDefault(msg, 7, false),
    isImage: jspb.Message.getFieldWithDefault(msg, 8, false),
    isLarge: jspb.Message.getFieldWithDefault(msg, 9, false),
    isSafeToColorize: jspb.Message.getFieldWithDefault(msg, 10, false),
    isText: jspb.Message.getFieldWithDefault(msg, 11, false),
    isVendored: jspb.Message.getFieldWithDefault(msg, 12, false),
    isViewable: jspb.Message.getFieldWithDefault(msg, 13, false),
    loc: jspb.Message.getFieldWithDefault(msg, 14, 0),
    sloc: jspb.Message.getFieldWithDefault(msg, 15, 0),
    type: jspb.Message.getFieldWithDefault(msg, 16, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.CommitLinguist}
 */
proto.github.CommitLinguist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.CommitLinguist;
  return proto.github.CommitLinguist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.CommitLinguist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.CommitLinguist}
 */
proto.github.CommitLinguist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisposition(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtname(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBinary(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDocumentation(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsGenerated(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsHighRatioOfLongLines(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsImage(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsLarge(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSafeToColorize(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsText(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsVendored(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsViewable(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLoc(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSloc(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.CommitLinguist} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.CommitLinguist.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.CommitLinguist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.CommitLinguist.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getContentType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDisposition();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getExtname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getIsBinary();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = this.getIsDocumentation();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = this.getIsGenerated();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = this.getIsHighRatioOfLongLines();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = this.getIsImage();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = this.getIsLarge();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = this.getIsSafeToColorize();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = this.getIsText();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = this.getIsVendored();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = this.getIsViewable();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = this.getLoc();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = this.getSloc();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
};


/**
 * optional string content_type = 1;
 * @return {string}
 */
proto.github.CommitLinguist.prototype.getContentType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.CommitLinguist.prototype.setContentType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string disposition = 2;
 * @return {string}
 */
proto.github.CommitLinguist.prototype.getDisposition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.CommitLinguist.prototype.setDisposition = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string extname = 3;
 * @return {string}
 */
proto.github.CommitLinguist.prototype.getExtname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.github.CommitLinguist.prototype.setExtname = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool is_binary = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.CommitLinguist.prototype.getIsBinary = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.github.CommitLinguist.prototype.setIsBinary = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool is_documentation = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.CommitLinguist.prototype.getIsDocumentation = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.github.CommitLinguist.prototype.setIsDocumentation = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool is_generated = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.CommitLinguist.prototype.getIsGenerated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.github.CommitLinguist.prototype.setIsGenerated = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool is_high_ratio_of_long_lines = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.CommitLinguist.prototype.getIsHighRatioOfLongLines = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.github.CommitLinguist.prototype.setIsHighRatioOfLongLines = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool is_image = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.CommitLinguist.prototype.getIsImage = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.github.CommitLinguist.prototype.setIsImage = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional bool is_large = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.CommitLinguist.prototype.getIsLarge = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.github.CommitLinguist.prototype.setIsLarge = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bool is_safe_to_colorize = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.CommitLinguist.prototype.getIsSafeToColorize = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.github.CommitLinguist.prototype.setIsSafeToColorize = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional bool is_text = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.CommitLinguist.prototype.getIsText = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.github.CommitLinguist.prototype.setIsText = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional bool is_vendored = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.CommitLinguist.prototype.getIsVendored = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.github.CommitLinguist.prototype.setIsVendored = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional bool is_viewable = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.CommitLinguist.prototype.getIsViewable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.github.CommitLinguist.prototype.setIsViewable = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional int32 loc = 14;
 * @return {number}
 */
proto.github.CommitLinguist.prototype.getLoc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.github.CommitLinguist.prototype.setLoc = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional int32 sloc = 15;
 * @return {number}
 */
proto.github.CommitLinguist.prototype.getSloc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.github.CommitLinguist.prototype.setSloc = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional string type = 16;
 * @return {string}
 */
proto.github.CommitLinguist.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.github.CommitLinguist.prototype.setType = function(value) {
  jspb.Message.setField(this, 16, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.CommitFramework = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.CommitFramework, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.CommitFramework.displayName = 'proto.github.CommitFramework';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.CommitFramework.prototype.toObject = function(opt_includeInstance) {
  return proto.github.CommitFramework.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.CommitFramework} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.CommitFramework.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.CommitFramework}
 */
proto.github.CommitFramework.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.CommitFramework;
  return proto.github.CommitFramework.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.CommitFramework} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.CommitFramework}
 */
proto.github.CommitFramework.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.CommitFramework} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.CommitFramework.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.CommitFramework.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.CommitFramework.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.github.CommitFramework.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.CommitFramework.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.CommitLicense = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.CommitLicense, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.CommitLicense.displayName = 'proto.github.CommitLicense';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.CommitLicense.prototype.toObject = function(opt_includeInstance) {
  return proto.github.CommitLicense.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.CommitLicense} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.CommitLicense.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    url: jspb.Message.getFieldWithDefault(msg, 3, ""),
    osiapproved: jspb.Message.getFieldWithDefault(msg, 4, false),
    license: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.CommitLicense}
 */
proto.github.CommitLicense.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.CommitLicense;
  return proto.github.CommitLicense.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.CommitLicense} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.CommitLicense}
 */
proto.github.CommitLicense.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOsiapproved(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLicense(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.CommitLicense} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.CommitLicense.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.CommitLicense.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.CommitLicense.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getOsiapproved();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = this.getLicense();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.github.CommitLicense.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.CommitLicense.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.github.CommitLicense.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.CommitLicense.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string url = 3;
 * @return {string}
 */
proto.github.CommitLicense.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.github.CommitLicense.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool osiApproved = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.CommitLicense.prototype.getOsiapproved = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.github.CommitLicense.prototype.setOsiapproved = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string license = 5;
 * @return {string}
 */
proto.github.CommitLicense.prototype.getLicense = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.github.CommitLicense.prototype.setLicense = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.CommitFileDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.CommitFileDetail.repeatedFields_, null);
};
goog.inherits(proto.github.CommitFileDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.CommitFileDetail.displayName = 'proto.github.CommitFileDetail';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.CommitFileDetail.repeatedFields_ = [16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.CommitFileDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.github.CommitFileDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.CommitFileDetail} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.CommitFileDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commit: jspb.Message.getFieldWithDefault(msg, 2, ""),
    author: (f = msg.getAuthor()) && user_pb.User.toObject(includeInstance, f),
    committer: (f = msg.getCommitter()) && user_pb.User.toObject(includeInstance, f),
    binary: jspb.Message.getFieldWithDefault(msg, 5, false),
    body: jspb.Message.getFieldWithDefault(msg, 6, ""),
    patch: jspb.Message.getFieldWithDefault(msg, 7, ""),
    filename: jspb.Message.getFieldWithDefault(msg, 8, ""),
    language: jspb.Message.getFieldWithDefault(msg, 9, ""),
    mimetype: jspb.Message.getFieldWithDefault(msg, 10, ""),
    status: jspb.Message.getFieldWithDefault(msg, 11, ""),
    size: jspb.Message.getFieldWithDefault(msg, 12, 0),
    additions: jspb.Message.getFieldWithDefault(msg, 13, 0),
    deletions: jspb.Message.getFieldWithDefault(msg, 14, 0),
    licensesMap: (f = msg.getLicensesMap()) ? f.toArray() : [],
    frameworksList: jspb.Message.toObjectList(msg.getFrameworksList(),
    proto.github.CommitFramework.toObject, includeInstance),
    linguist: (f = msg.getLinguist()) && proto.github.CommitLinguist.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.CommitFileDetail}
 */
proto.github.CommitFileDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.CommitFileDetail;
  return proto.github.CommitFileDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.CommitFileDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.CommitFileDetail}
 */
proto.github.CommitFileDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommit(value);
      break;
    case 3:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setAuthor(value);
      break;
    case 4:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setCommitter(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBinary(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPatch(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMimetype(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAdditions(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeletions(value);
      break;
    case 15:
      var value = msg.getLicensesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.github.CommitLicense.deserializeBinaryFromReader);
         });
      break;
    case 16:
      var value = new proto.github.CommitFramework;
      reader.readMessage(value,proto.github.CommitFramework.deserializeBinaryFromReader);
      msg.addFrameworks(value);
      break;
    case 17:
      var value = new proto.github.CommitLinguist;
      reader.readMessage(value,proto.github.CommitLinguist.deserializeBinaryFromReader);
      msg.setLinguist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.CommitFileDetail} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.CommitFileDetail.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.CommitFileDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.CommitFileDetail.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getCommit();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAuthor();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = this.getCommitter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = this.getBinary();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = this.getBody();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getPatch();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getFilename();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getMimetype();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getStatus();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getSize();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = this.getAdditions();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = this.getDeletions();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = this.getLicensesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.github.CommitLicense.serializeBinaryToWriter);
  }
  f = this.getFrameworksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.github.CommitFramework.serializeBinaryToWriter
    );
  }
  f = this.getLinguist();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.github.CommitLinguist.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.github.CommitFileDetail.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.CommitFileDetail.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string commit = 2;
 * @return {string}
 */
proto.github.CommitFileDetail.prototype.getCommit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.CommitFileDetail.prototype.setCommit = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional User author = 3;
 * @return {?proto.github.User}
 */
proto.github.CommitFileDetail.prototype.getAuthor = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 3));
};


/** @param {?proto.github.User|undefined} value */
proto.github.CommitFileDetail.prototype.setAuthor = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.github.CommitFileDetail.prototype.clearAuthor = function() {
  this.setAuthor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.CommitFileDetail.prototype.hasAuthor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional User committer = 4;
 * @return {?proto.github.User}
 */
proto.github.CommitFileDetail.prototype.getCommitter = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 4));
};


/** @param {?proto.github.User|undefined} value */
proto.github.CommitFileDetail.prototype.setCommitter = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.github.CommitFileDetail.prototype.clearCommitter = function() {
  this.setCommitter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.CommitFileDetail.prototype.hasCommitter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool binary = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.CommitFileDetail.prototype.getBinary = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.github.CommitFileDetail.prototype.setBinary = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string body = 6;
 * @return {string}
 */
proto.github.CommitFileDetail.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.github.CommitFileDetail.prototype.setBody = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string patch = 7;
 * @return {string}
 */
proto.github.CommitFileDetail.prototype.getPatch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.github.CommitFileDetail.prototype.setPatch = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string filename = 8;
 * @return {string}
 */
proto.github.CommitFileDetail.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.github.CommitFileDetail.prototype.setFilename = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string language = 9;
 * @return {string}
 */
proto.github.CommitFileDetail.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.github.CommitFileDetail.prototype.setLanguage = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string mimetype = 10;
 * @return {string}
 */
proto.github.CommitFileDetail.prototype.getMimetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.github.CommitFileDetail.prototype.setMimetype = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string status = 11;
 * @return {string}
 */
proto.github.CommitFileDetail.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.github.CommitFileDetail.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional int32 size = 12;
 * @return {number}
 */
proto.github.CommitFileDetail.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.github.CommitFileDetail.prototype.setSize = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional int32 additions = 13;
 * @return {number}
 */
proto.github.CommitFileDetail.prototype.getAdditions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.github.CommitFileDetail.prototype.setAdditions = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional int32 deletions = 14;
 * @return {number}
 */
proto.github.CommitFileDetail.prototype.getDeletions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.github.CommitFileDetail.prototype.setDeletions = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * map<string, CommitLicense> licenses = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.github.CommitLicense>}
 */
proto.github.CommitFileDetail.prototype.getLicensesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.github.CommitLicense>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      proto.github.CommitLicense));
};


proto.github.CommitFileDetail.prototype.clearLicensesMap = function() {
  this.getLicensesMap().clear();
};


/**
 * repeated CommitFramework frameworks = 16;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.github.CommitFramework>}
 */
proto.github.CommitFileDetail.prototype.getFrameworksList = function() {
  return /** @type{!Array.<!proto.github.CommitFramework>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.CommitFramework, 16));
};


/** @param {!Array.<!proto.github.CommitFramework>} value */
proto.github.CommitFileDetail.prototype.setFrameworksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.github.CommitFramework=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.CommitFramework}
 */
proto.github.CommitFileDetail.prototype.addFrameworks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.github.CommitFramework, opt_index);
};


proto.github.CommitFileDetail.prototype.clearFrameworksList = function() {
  this.setFrameworksList([]);
};


/**
 * optional CommitLinguist linguist = 17;
 * @return {?proto.github.CommitLinguist}
 */
proto.github.CommitFileDetail.prototype.getLinguist = function() {
  return /** @type{?proto.github.CommitLinguist} */ (
    jspb.Message.getWrapperField(this, proto.github.CommitLinguist, 17));
};


/** @param {?proto.github.CommitLinguist|undefined} value */
proto.github.CommitFileDetail.prototype.setLinguist = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.github.CommitFileDetail.prototype.clearLinguist = function() {
  this.setLinguist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.CommitFileDetail.prototype.hasLinguist = function() {
  return jspb.Message.getField(this, 17) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.CommitDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.CommitDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.CommitDetail.displayName = 'proto.github.CommitDetail';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.CommitDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.github.CommitDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.CommitDetail} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.CommitDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    author: (f = msg.getAuthor()) && commit_user_pb.CommitUser.toObject(includeInstance, f),
    committer: (f = msg.getCommitter()) && commit_user_pb.CommitUser.toObject(includeInstance, f),
    commentCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    message: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tree: (f = msg.getTree()) && proto.github.CommitDetailTree.toObject(includeInstance, f),
    url: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.CommitDetail}
 */
proto.github.CommitDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.CommitDetail;
  return proto.github.CommitDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.CommitDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.CommitDetail}
 */
proto.github.CommitDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new commit_user_pb.CommitUser;
      reader.readMessage(value,commit_user_pb.CommitUser.deserializeBinaryFromReader);
      msg.setAuthor(value);
      break;
    case 2:
      var value = new commit_user_pb.CommitUser;
      reader.readMessage(value,commit_user_pb.CommitUser.deserializeBinaryFromReader);
      msg.setCommitter(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommentCount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 5:
      var value = new proto.github.CommitDetailTree;
      reader.readMessage(value,proto.github.CommitDetailTree.deserializeBinaryFromReader);
      msg.setTree(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.CommitDetail} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.CommitDetail.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.CommitDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.CommitDetail.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAuthor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      commit_user_pb.CommitUser.serializeBinaryToWriter
    );
  }
  f = this.getCommitter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      commit_user_pb.CommitUser.serializeBinaryToWriter
    );
  }
  f = this.getCommentCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getTree();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.github.CommitDetailTree.serializeBinaryToWriter
    );
  }
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional CommitUser author = 1;
 * @return {?proto.github.CommitUser}
 */
proto.github.CommitDetail.prototype.getAuthor = function() {
  return /** @type{?proto.github.CommitUser} */ (
    jspb.Message.getWrapperField(this, commit_user_pb.CommitUser, 1));
};


/** @param {?proto.github.CommitUser|undefined} value */
proto.github.CommitDetail.prototype.setAuthor = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.github.CommitDetail.prototype.clearAuthor = function() {
  this.setAuthor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.CommitDetail.prototype.hasAuthor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CommitUser committer = 2;
 * @return {?proto.github.CommitUser}
 */
proto.github.CommitDetail.prototype.getCommitter = function() {
  return /** @type{?proto.github.CommitUser} */ (
    jspb.Message.getWrapperField(this, commit_user_pb.CommitUser, 2));
};


/** @param {?proto.github.CommitUser|undefined} value */
proto.github.CommitDetail.prototype.setCommitter = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.github.CommitDetail.prototype.clearCommitter = function() {
  this.setCommitter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.CommitDetail.prototype.hasCommitter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 comment_count = 3;
 * @return {number}
 */
proto.github.CommitDetail.prototype.getCommentCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.github.CommitDetail.prototype.setCommentCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string message = 4;
 * @return {string}
 */
proto.github.CommitDetail.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.github.CommitDetail.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional CommitDetailTree tree = 5;
 * @return {?proto.github.CommitDetailTree}
 */
proto.github.CommitDetail.prototype.getTree = function() {
  return /** @type{?proto.github.CommitDetailTree} */ (
    jspb.Message.getWrapperField(this, proto.github.CommitDetailTree, 5));
};


/** @param {?proto.github.CommitDetailTree|undefined} value */
proto.github.CommitDetail.prototype.setTree = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.github.CommitDetail.prototype.clearTree = function() {
  this.setTree(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.CommitDetail.prototype.hasTree = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string url = 6;
 * @return {string}
 */
proto.github.CommitDetail.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.github.CommitDetail.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.Commit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.Commit.repeatedFields_, null);
};
goog.inherits(proto.github.Commit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.Commit.displayName = 'proto.github.Commit';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.Commit.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.Commit.prototype.toObject = function(opt_includeInstance) {
  return proto.github.Commit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.Commit} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.Commit.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sha: jspb.Message.getFieldWithDefault(msg, 2, ""),
    author: (f = msg.getAuthor()) && user_pb.User.toObject(includeInstance, f),
    committer: (f = msg.getCommitter()) && user_pb.User.toObject(includeInstance, f),
    commit: (f = msg.getCommit()) && proto.github.CommitDetail.toObject(includeInstance, f),
    filesList: jspb.Message.toObjectList(msg.getFilesList(),
    proto.github.CommitFileDetail.toObject, includeInstance),
    parentsList: jspb.Message.toObjectList(msg.getParentsList(),
    proto.github.CommitDetailTree.toObject, includeInstance),
    repo: (f = msg.getRepo()) && repository_pb.Repository.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.Commit}
 */
proto.github.Commit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.Commit;
  return proto.github.Commit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.Commit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.Commit}
 */
proto.github.Commit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSha(value);
      break;
    case 3:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setAuthor(value);
      break;
    case 4:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setCommitter(value);
      break;
    case 5:
      var value = new proto.github.CommitDetail;
      reader.readMessage(value,proto.github.CommitDetail.deserializeBinaryFromReader);
      msg.setCommit(value);
      break;
    case 6:
      var value = new proto.github.CommitFileDetail;
      reader.readMessage(value,proto.github.CommitFileDetail.deserializeBinaryFromReader);
      msg.addFiles(value);
      break;
    case 7:
      var value = new proto.github.CommitDetailTree;
      reader.readMessage(value,proto.github.CommitDetailTree.deserializeBinaryFromReader);
      msg.addParents(value);
      break;
    case 8:
      var value = new repository_pb.Repository;
      reader.readMessage(value,repository_pb.Repository.deserializeBinaryFromReader);
      msg.setRepo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.Commit} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.Commit.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.Commit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.Commit.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSha();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAuthor();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = this.getCommitter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = this.getCommit();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.github.CommitDetail.serializeBinaryToWriter
    );
  }
  f = this.getFilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.github.CommitFileDetail.serializeBinaryToWriter
    );
  }
  f = this.getParentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.github.CommitDetailTree.serializeBinaryToWriter
    );
  }
  f = this.getRepo();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      repository_pb.Repository.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.github.Commit.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.Commit.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string sha = 2;
 * @return {string}
 */
proto.github.Commit.prototype.getSha = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.Commit.prototype.setSha = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional User author = 3;
 * @return {?proto.github.User}
 */
proto.github.Commit.prototype.getAuthor = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 3));
};


/** @param {?proto.github.User|undefined} value */
proto.github.Commit.prototype.setAuthor = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.github.Commit.prototype.clearAuthor = function() {
  this.setAuthor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Commit.prototype.hasAuthor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional User committer = 4;
 * @return {?proto.github.User}
 */
proto.github.Commit.prototype.getCommitter = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 4));
};


/** @param {?proto.github.User|undefined} value */
proto.github.Commit.prototype.setCommitter = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.github.Commit.prototype.clearCommitter = function() {
  this.setCommitter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Commit.prototype.hasCommitter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CommitDetail commit = 5;
 * @return {?proto.github.CommitDetail}
 */
proto.github.Commit.prototype.getCommit = function() {
  return /** @type{?proto.github.CommitDetail} */ (
    jspb.Message.getWrapperField(this, proto.github.CommitDetail, 5));
};


/** @param {?proto.github.CommitDetail|undefined} value */
proto.github.Commit.prototype.setCommit = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.github.Commit.prototype.clearCommit = function() {
  this.setCommit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Commit.prototype.hasCommit = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated CommitFileDetail files = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.github.CommitFileDetail>}
 */
proto.github.Commit.prototype.getFilesList = function() {
  return /** @type{!Array.<!proto.github.CommitFileDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.CommitFileDetail, 6));
};


/** @param {!Array.<!proto.github.CommitFileDetail>} value */
proto.github.Commit.prototype.setFilesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.github.CommitFileDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.CommitFileDetail}
 */
proto.github.Commit.prototype.addFiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.github.CommitFileDetail, opt_index);
};


proto.github.Commit.prototype.clearFilesList = function() {
  this.setFilesList([]);
};


/**
 * repeated CommitDetailTree parents = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.github.CommitDetailTree>}
 */
proto.github.Commit.prototype.getParentsList = function() {
  return /** @type{!Array.<!proto.github.CommitDetailTree>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.CommitDetailTree, 7));
};


/** @param {!Array.<!proto.github.CommitDetailTree>} value */
proto.github.Commit.prototype.setParentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.github.CommitDetailTree=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.CommitDetailTree}
 */
proto.github.Commit.prototype.addParents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.github.CommitDetailTree, opt_index);
};


proto.github.Commit.prototype.clearParentsList = function() {
  this.setParentsList([]);
};


/**
 * optional Repository repo = 8;
 * @return {?proto.github.Repository}
 */
proto.github.Commit.prototype.getRepo = function() {
  return /** @type{?proto.github.Repository} */ (
    jspb.Message.getWrapperField(this, repository_pb.Repository, 8));
};


/** @param {?proto.github.Repository|undefined} value */
proto.github.Commit.prototype.setRepo = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.github.Commit.prototype.clearRepo = function() {
  this.setRepo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Commit.prototype.hasRepo = function() {
  return jspb.Message.getField(this, 8) != null;
};


goog.object.extend(exports, proto.github);
