/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var user_pb = require('./user_pb.js');
var milestone_pb = require('./milestone_pb.js');
goog.exportSymbol('proto.github.Issue', null, global);
goog.exportSymbol('proto.github.Label', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.Label = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.Label, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.Label.displayName = 'proto.github.Label';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.Label.prototype.toObject = function(opt_includeInstance) {
  return proto.github.Label.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.Label} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.Label.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    color: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.Label}
 */
proto.github.Label.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.Label;
  return proto.github.Label.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.Label} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.Label}
 */
proto.github.Label.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.Label} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.Label.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.Label.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.Label.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getColor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.github.Label.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.Label.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.github.Label.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.Label.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string color = 3;
 * @return {string}
 */
proto.github.Label.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.github.Label.prototype.setColor = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.Issue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.Issue.repeatedFields_, null);
};
goog.inherits(proto.github.Issue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.Issue.displayName = 'proto.github.Issue';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.Issue.repeatedFields_ = [13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.Issue.prototype.toObject = function(opt_includeInstance) {
  return proto.github.Issue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.Issue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.Issue.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    url: jspb.Message.getFieldWithDefault(msg, 2, ""),
    repositoryUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    labelsUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    commentsUrl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    eventsUrl: jspb.Message.getFieldWithDefault(msg, 6, ""),
    htmlUrl: jspb.Message.getFieldWithDefault(msg, 7, ""),
    number: jspb.Message.getFieldWithDefault(msg, 8, 0),
    state: jspb.Message.getFieldWithDefault(msg, 9, ""),
    title: jspb.Message.getFieldWithDefault(msg, 10, ""),
    body: jspb.Message.getFieldWithDefault(msg, 11, ""),
    user: (f = msg.getUser()) && user_pb.User.toObject(includeInstance, f),
    labelsList: jspb.Message.toObjectList(msg.getLabelsList(),
    proto.github.Label.toObject, includeInstance),
    assignee: (f = msg.getAssignee()) && user_pb.User.toObject(includeInstance, f),
    milestone: (f = msg.getMilestone()) && milestone_pb.Milestone.toObject(includeInstance, f),
    locked: jspb.Message.getFieldWithDefault(msg, 16, false),
    comments: jspb.Message.getFieldWithDefault(msg, 17, 0),
    closedAt: jspb.Message.getFieldWithDefault(msg, 18, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 19, ""),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 20, ""),
    closedBy: (f = msg.getClosedBy()) && user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.Issue}
 */
proto.github.Issue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.Issue;
  return proto.github.Issue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.Issue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.Issue}
 */
proto.github.Issue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRepositoryUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabelsUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommentsUrl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventsUrl(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtmlUrl(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumber(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 12:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 13:
      var value = new proto.github.Label;
      reader.readMessage(value,proto.github.Label.deserializeBinaryFromReader);
      msg.addLabels(value);
      break;
    case 14:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setAssignee(value);
      break;
    case 15:
      var value = new milestone_pb.Milestone;
      reader.readMessage(value,milestone_pb.Milestone.deserializeBinaryFromReader);
      msg.setMilestone(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocked(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setComments(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setClosedAt(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedAt(value);
      break;
    case 21:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setClosedBy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.Issue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.Issue.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.Issue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.Issue.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRepositoryUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getLabelsUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getCommentsUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getEventsUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getHtmlUrl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getNumber();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = this.getState();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getBody();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getUser();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = this.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.github.Label.serializeBinaryToWriter
    );
  }
  f = this.getAssignee();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = this.getMilestone();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      milestone_pb.Milestone.serializeBinaryToWriter
    );
  }
  f = this.getLocked();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = this.getComments();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = this.getClosedAt();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = this.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = this.getUpdatedAt();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = this.getClosedBy();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.github.Issue.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.github.Issue.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.github.Issue.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.Issue.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string repository_url = 3;
 * @return {string}
 */
proto.github.Issue.prototype.getRepositoryUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.github.Issue.prototype.setRepositoryUrl = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string labels_url = 4;
 * @return {string}
 */
proto.github.Issue.prototype.getLabelsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.github.Issue.prototype.setLabelsUrl = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string comments_url = 5;
 * @return {string}
 */
proto.github.Issue.prototype.getCommentsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.github.Issue.prototype.setCommentsUrl = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string events_url = 6;
 * @return {string}
 */
proto.github.Issue.prototype.getEventsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.github.Issue.prototype.setEventsUrl = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string html_url = 7;
 * @return {string}
 */
proto.github.Issue.prototype.getHtmlUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.github.Issue.prototype.setHtmlUrl = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 number = 8;
 * @return {number}
 */
proto.github.Issue.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.github.Issue.prototype.setNumber = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string state = 9;
 * @return {string}
 */
proto.github.Issue.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.github.Issue.prototype.setState = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string title = 10;
 * @return {string}
 */
proto.github.Issue.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.github.Issue.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string body = 11;
 * @return {string}
 */
proto.github.Issue.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.github.Issue.prototype.setBody = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional User user = 12;
 * @return {?proto.github.User}
 */
proto.github.Issue.prototype.getUser = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 12));
};


/** @param {?proto.github.User|undefined} value */
proto.github.Issue.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.github.Issue.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Issue.prototype.hasUser = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated Label labels = 13;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.github.Label>}
 */
proto.github.Issue.prototype.getLabelsList = function() {
  return /** @type{!Array.<!proto.github.Label>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.Label, 13));
};


/** @param {!Array.<!proto.github.Label>} value */
proto.github.Issue.prototype.setLabelsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.github.Label=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.Label}
 */
proto.github.Issue.prototype.addLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.github.Label, opt_index);
};


proto.github.Issue.prototype.clearLabelsList = function() {
  this.setLabelsList([]);
};


/**
 * optional User assignee = 14;
 * @return {?proto.github.User}
 */
proto.github.Issue.prototype.getAssignee = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 14));
};


/** @param {?proto.github.User|undefined} value */
proto.github.Issue.prototype.setAssignee = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.github.Issue.prototype.clearAssignee = function() {
  this.setAssignee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Issue.prototype.hasAssignee = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional Milestone milestone = 15;
 * @return {?proto.github.Milestone}
 */
proto.github.Issue.prototype.getMilestone = function() {
  return /** @type{?proto.github.Milestone} */ (
    jspb.Message.getWrapperField(this, milestone_pb.Milestone, 15));
};


/** @param {?proto.github.Milestone|undefined} value */
proto.github.Issue.prototype.setMilestone = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.github.Issue.prototype.clearMilestone = function() {
  this.setMilestone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Issue.prototype.hasMilestone = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bool locked = 16;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.Issue.prototype.getLocked = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 16, false));
};


/** @param {boolean} value */
proto.github.Issue.prototype.setLocked = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional int32 comments = 17;
 * @return {number}
 */
proto.github.Issue.prototype.getComments = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.github.Issue.prototype.setComments = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional string closed_at = 18;
 * @return {string}
 */
proto.github.Issue.prototype.getClosedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.github.Issue.prototype.setClosedAt = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional string created_at = 19;
 * @return {string}
 */
proto.github.Issue.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.github.Issue.prototype.setCreatedAt = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional string updated_at = 20;
 * @return {string}
 */
proto.github.Issue.prototype.getUpdatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.github.Issue.prototype.setUpdatedAt = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * optional User closed_by = 21;
 * @return {?proto.github.User}
 */
proto.github.Issue.prototype.getClosedBy = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 21));
};


/** @param {?proto.github.User|undefined} value */
proto.github.Issue.prototype.setClosedBy = function(value) {
  jspb.Message.setWrapperField(this, 21, value);
};


proto.github.Issue.prototype.clearClosedBy = function() {
  this.setClosedBy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Issue.prototype.hasClosedBy = function() {
  return jspb.Message.getField(this, 21) != null;
};


goog.object.extend(exports, proto.github);


// patched by github-protobuf to add toJSON and fromJSON methods

function _toBool (obj) {
	if (typeof(obj) === 'boolean') { return obj; }
	if (typeof(obj) === 'string') { return obj === 'true'; }
	if (typeof(obj) === 'number') { return obj > 0; }
	return false;
};



// .github.Issue
proto.github.Issue.prototype.fromJSON = function(obj) {
	'id' in obj && this.setId(+obj.id);
	'url' in obj && this.setUrl(obj.url);
	'repository_url' in obj && this.setRepositoryUrl(obj.repository_url);
	'labels_url' in obj && this.setLabelsUrl(obj.labels_url);
	'comments_url' in obj && this.setCommentsUrl(obj.comments_url);
	'events_url' in obj && this.setEventsUrl(obj.events_url);
	'html_url' in obj && this.setHtmlUrl(obj.html_url);
	'number' in obj && this.setNumber(+obj.number);
	'state' in obj && this.setState(obj.state);
	'title' in obj && this.setTitle(obj.title);
	'body' in obj && this.setBody(obj.body);
	if ('user' in obj) {
		var User = require('./user_pb.js').User;
		var UserInstance = new User();
		this.setUser(UserInstance.fromJSON(obj.user));
	}
	if ('labels' in obj) {
		var Label = require('./issue_pb.js').Label;
		var LabelInstance = new Label();
		this.setLabels(LabelInstance.fromJSON(obj.labels));
	}
	if ('assignee' in obj) {
		var User = require('./user_pb.js').User;
		var UserInstance = new User();
		this.setAssignee(UserInstance.fromJSON(obj.assignee));
	}
	if ('milestone' in obj) {
		var Milestone = require('./milestone_pb.js').Milestone;
		var MilestoneInstance = new Milestone();
		this.setMilestone(MilestoneInstance.fromJSON(obj.milestone));
	}
	'locked' in obj && this.setLocked(_toBool(obj.locked));
	'comments' in obj && this.setComments(+obj.comments);
	'closed_at' in obj && this.setClosedAt(obj.closed_at);
	'created_at' in obj && this.setCreatedAt(obj.created_at);
	'updated_at' in obj && this.setUpdatedAt(obj.updated_at);
	if ('closed_by' in obj) {
		var User = require('./user_pb.js').User;
		var UserInstance = new User();
		this.setClosedBy(UserInstance.fromJSON(obj.closed_by));
	}
	return this;
};

proto.github.Issue.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('id' in obj) {
		obj.id = obj.id;
		delete obj.id;
	}
	if ('url' in obj) {
		obj.url = obj.url;
		delete obj.url;
	}
	if ('repositoryUrl' in obj) {
		obj.repository_url = obj.repositoryUrl;
		delete obj.repositoryUrl;
	}
	if ('labelsUrl' in obj) {
		obj.labels_url = obj.labelsUrl;
		delete obj.labelsUrl;
	}
	if ('commentsUrl' in obj) {
		obj.comments_url = obj.commentsUrl;
		delete obj.commentsUrl;
	}
	if ('eventsUrl' in obj) {
		obj.events_url = obj.eventsUrl;
		delete obj.eventsUrl;
	}
	if ('htmlUrl' in obj) {
		obj.html_url = obj.htmlUrl;
		delete obj.htmlUrl;
	}
	if ('number' in obj) {
		obj.number = obj.number;
		delete obj.number;
	}
	if ('state' in obj) {
		obj.state = obj.state;
		delete obj.state;
	}
	if ('title' in obj) {
		obj.title = obj.title;
		delete obj.title;
	}
	if ('body' in obj) {
		obj.body = obj.body;
		delete obj.body;
	}
	if ('user' in obj) {
		obj.user = this.getUser().toJSON();
	}
	if ('labels' in obj) {
		obj.labels = this.getLabels().toJSON();
	}
	if ('assignee' in obj) {
		obj.assignee = this.getAssignee().toJSON();
	}
	if ('milestone' in obj) {
		obj.milestone = this.getMilestone().toJSON();
	}
	if ('locked' in obj) {
		obj.locked = obj.locked;
		delete obj.locked;
	}
	if ('comments' in obj) {
		obj.comments = obj.comments;
		delete obj.comments;
	}
	if ('closedAt' in obj) {
		obj.closed_at = obj.closedAt;
		delete obj.closedAt;
	}
	if ('createdAt' in obj) {
		obj.created_at = obj.createdAt;
		delete obj.createdAt;
	}
	if ('updatedAt' in obj) {
		obj.updated_at = obj.updatedAt;
		delete obj.updatedAt;
	}
	if ('closedBy' in obj) {
		obj.closed_by = this.getClosedBy().toJSON();
	}
	return obj;
};



// .github.Label
proto.github.Label.prototype.fromJSON = function(obj) {
	'url' in obj && this.setUrl(obj.url);
	'name' in obj && this.setName(obj.name);
	'color' in obj && this.setColor(obj.color);
	return this;
};

proto.github.Label.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('url' in obj) {
		obj.url = obj.url;
		delete obj.url;
	}
	if ('name' in obj) {
		obj.name = obj.name;
		delete obj.name;
	}
	if ('color' in obj) {
		obj.color = obj.color;
		delete obj.color;
	}
	return obj;
};

