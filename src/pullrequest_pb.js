/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var user_pb = require('./user_pb.js');
var repository_pb = require('./repository_pb.js');
var milestone_pb = require('./milestone_pb.js');
goog.exportSymbol('proto.github.LinkHref', null, global);
goog.exportSymbol('proto.github.Links', null, global);
goog.exportSymbol('proto.github.PullRequest', null, global);
goog.exportSymbol('proto.github.RepositoryRef', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.RepositoryRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.RepositoryRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.RepositoryRef.displayName = 'proto.github.RepositoryRef';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.RepositoryRef.prototype.toObject = function(opt_includeInstance) {
  return proto.github.RepositoryRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.RepositoryRef} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.RepositoryRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ref: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sha: jspb.Message.getFieldWithDefault(msg, 3, ""),
    user: (f = msg.getUser()) && user_pb.User.toObject(includeInstance, f),
    repo: (f = msg.getRepo()) && repository_pb.Repository.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.RepositoryRef}
 */
proto.github.RepositoryRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.RepositoryRef;
  return proto.github.RepositoryRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.RepositoryRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.RepositoryRef}
 */
proto.github.RepositoryRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSha(value);
      break;
    case 4:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 5:
      var value = new repository_pb.Repository;
      reader.readMessage(value,repository_pb.Repository.deserializeBinaryFromReader);
      msg.setRepo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.RepositoryRef} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.RepositoryRef.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.RepositoryRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.RepositoryRef.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getRef();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getSha();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getUser();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = this.getRepo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      repository_pb.Repository.serializeBinaryToWriter
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.github.RepositoryRef.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.RepositoryRef.prototype.setLabel = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string ref = 2;
 * @return {string}
 */
proto.github.RepositoryRef.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.RepositoryRef.prototype.setRef = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string sha = 3;
 * @return {string}
 */
proto.github.RepositoryRef.prototype.getSha = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.github.RepositoryRef.prototype.setSha = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional User user = 4;
 * @return {?proto.github.User}
 */
proto.github.RepositoryRef.prototype.getUser = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 4));
};


/** @param {?proto.github.User|undefined} value */
proto.github.RepositoryRef.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.github.RepositoryRef.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.RepositoryRef.prototype.hasUser = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Repository repo = 5;
 * @return {?proto.github.Repository}
 */
proto.github.RepositoryRef.prototype.getRepo = function() {
  return /** @type{?proto.github.Repository} */ (
    jspb.Message.getWrapperField(this, repository_pb.Repository, 5));
};


/** @param {?proto.github.Repository|undefined} value */
proto.github.RepositoryRef.prototype.setRepo = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.github.RepositoryRef.prototype.clearRepo = function() {
  this.setRepo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.RepositoryRef.prototype.hasRepo = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.LinkHref = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.LinkHref, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.LinkHref.displayName = 'proto.github.LinkHref';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.LinkHref.prototype.toObject = function(opt_includeInstance) {
  return proto.github.LinkHref.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.LinkHref} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.LinkHref.toObject = function(includeInstance, msg) {
  var f, obj = {
    href: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.LinkHref}
 */
proto.github.LinkHref.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.LinkHref;
  return proto.github.LinkHref.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.LinkHref} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.LinkHref}
 */
proto.github.LinkHref.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHref(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.LinkHref} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.LinkHref.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.LinkHref.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.LinkHref.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getHref();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string href = 1;
 * @return {string}
 */
proto.github.LinkHref.prototype.getHref = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.LinkHref.prototype.setHref = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.Links = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.Links, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.Links.displayName = 'proto.github.Links';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.Links.prototype.toObject = function(opt_includeInstance) {
  return proto.github.Links.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.Links} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.Links.toObject = function(includeInstance, msg) {
  var f, obj = {
    self: (f = msg.getSelf()) && proto.github.LinkHref.toObject(includeInstance, f),
    html: (f = msg.getHtml()) && proto.github.LinkHref.toObject(includeInstance, f),
    issue: (f = msg.getIssue()) && proto.github.LinkHref.toObject(includeInstance, f),
    comments: (f = msg.getComments()) && proto.github.LinkHref.toObject(includeInstance, f),
    reviewComments: (f = msg.getReviewComments()) && proto.github.LinkHref.toObject(includeInstance, f),
    reviewComment: (f = msg.getReviewComment()) && proto.github.LinkHref.toObject(includeInstance, f),
    commits: (f = msg.getCommits()) && proto.github.LinkHref.toObject(includeInstance, f),
    statuses: (f = msg.getStatuses()) && proto.github.LinkHref.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.Links}
 */
proto.github.Links.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.Links;
  return proto.github.Links.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.Links} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.Links}
 */
proto.github.Links.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.github.LinkHref;
      reader.readMessage(value,proto.github.LinkHref.deserializeBinaryFromReader);
      msg.setSelf(value);
      break;
    case 2:
      var value = new proto.github.LinkHref;
      reader.readMessage(value,proto.github.LinkHref.deserializeBinaryFromReader);
      msg.setHtml(value);
      break;
    case 3:
      var value = new proto.github.LinkHref;
      reader.readMessage(value,proto.github.LinkHref.deserializeBinaryFromReader);
      msg.setIssue(value);
      break;
    case 4:
      var value = new proto.github.LinkHref;
      reader.readMessage(value,proto.github.LinkHref.deserializeBinaryFromReader);
      msg.setComments(value);
      break;
    case 5:
      var value = new proto.github.LinkHref;
      reader.readMessage(value,proto.github.LinkHref.deserializeBinaryFromReader);
      msg.setReviewComments(value);
      break;
    case 6:
      var value = new proto.github.LinkHref;
      reader.readMessage(value,proto.github.LinkHref.deserializeBinaryFromReader);
      msg.setReviewComment(value);
      break;
    case 7:
      var value = new proto.github.LinkHref;
      reader.readMessage(value,proto.github.LinkHref.deserializeBinaryFromReader);
      msg.setCommits(value);
      break;
    case 8:
      var value = new proto.github.LinkHref;
      reader.readMessage(value,proto.github.LinkHref.deserializeBinaryFromReader);
      msg.setStatuses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.Links} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.Links.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.Links.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.Links.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSelf();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.github.LinkHref.serializeBinaryToWriter
    );
  }
  f = this.getHtml();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.github.LinkHref.serializeBinaryToWriter
    );
  }
  f = this.getIssue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.github.LinkHref.serializeBinaryToWriter
    );
  }
  f = this.getComments();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.github.LinkHref.serializeBinaryToWriter
    );
  }
  f = this.getReviewComments();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.github.LinkHref.serializeBinaryToWriter
    );
  }
  f = this.getReviewComment();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.github.LinkHref.serializeBinaryToWriter
    );
  }
  f = this.getCommits();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.github.LinkHref.serializeBinaryToWriter
    );
  }
  f = this.getStatuses();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.github.LinkHref.serializeBinaryToWriter
    );
  }
};


/**
 * optional LinkHref self = 1;
 * @return {?proto.github.LinkHref}
 */
proto.github.Links.prototype.getSelf = function() {
  return /** @type{?proto.github.LinkHref} */ (
    jspb.Message.getWrapperField(this, proto.github.LinkHref, 1));
};


/** @param {?proto.github.LinkHref|undefined} value */
proto.github.Links.prototype.setSelf = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.github.Links.prototype.clearSelf = function() {
  this.setSelf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Links.prototype.hasSelf = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LinkHref html = 2;
 * @return {?proto.github.LinkHref}
 */
proto.github.Links.prototype.getHtml = function() {
  return /** @type{?proto.github.LinkHref} */ (
    jspb.Message.getWrapperField(this, proto.github.LinkHref, 2));
};


/** @param {?proto.github.LinkHref|undefined} value */
proto.github.Links.prototype.setHtml = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.github.Links.prototype.clearHtml = function() {
  this.setHtml(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Links.prototype.hasHtml = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LinkHref issue = 3;
 * @return {?proto.github.LinkHref}
 */
proto.github.Links.prototype.getIssue = function() {
  return /** @type{?proto.github.LinkHref} */ (
    jspb.Message.getWrapperField(this, proto.github.LinkHref, 3));
};


/** @param {?proto.github.LinkHref|undefined} value */
proto.github.Links.prototype.setIssue = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.github.Links.prototype.clearIssue = function() {
  this.setIssue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Links.prototype.hasIssue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LinkHref comments = 4;
 * @return {?proto.github.LinkHref}
 */
proto.github.Links.prototype.getComments = function() {
  return /** @type{?proto.github.LinkHref} */ (
    jspb.Message.getWrapperField(this, proto.github.LinkHref, 4));
};


/** @param {?proto.github.LinkHref|undefined} value */
proto.github.Links.prototype.setComments = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.github.Links.prototype.clearComments = function() {
  this.setComments(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Links.prototype.hasComments = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional LinkHref review_comments = 5;
 * @return {?proto.github.LinkHref}
 */
proto.github.Links.prototype.getReviewComments = function() {
  return /** @type{?proto.github.LinkHref} */ (
    jspb.Message.getWrapperField(this, proto.github.LinkHref, 5));
};


/** @param {?proto.github.LinkHref|undefined} value */
proto.github.Links.prototype.setReviewComments = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.github.Links.prototype.clearReviewComments = function() {
  this.setReviewComments(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Links.prototype.hasReviewComments = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional LinkHref review_comment = 6;
 * @return {?proto.github.LinkHref}
 */
proto.github.Links.prototype.getReviewComment = function() {
  return /** @type{?proto.github.LinkHref} */ (
    jspb.Message.getWrapperField(this, proto.github.LinkHref, 6));
};


/** @param {?proto.github.LinkHref|undefined} value */
proto.github.Links.prototype.setReviewComment = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.github.Links.prototype.clearReviewComment = function() {
  this.setReviewComment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Links.prototype.hasReviewComment = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional LinkHref commits = 7;
 * @return {?proto.github.LinkHref}
 */
proto.github.Links.prototype.getCommits = function() {
  return /** @type{?proto.github.LinkHref} */ (
    jspb.Message.getWrapperField(this, proto.github.LinkHref, 7));
};


/** @param {?proto.github.LinkHref|undefined} value */
proto.github.Links.prototype.setCommits = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.github.Links.prototype.clearCommits = function() {
  this.setCommits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Links.prototype.hasCommits = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional LinkHref statuses = 8;
 * @return {?proto.github.LinkHref}
 */
proto.github.Links.prototype.getStatuses = function() {
  return /** @type{?proto.github.LinkHref} */ (
    jspb.Message.getWrapperField(this, proto.github.LinkHref, 8));
};


/** @param {?proto.github.LinkHref|undefined} value */
proto.github.Links.prototype.setStatuses = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.github.Links.prototype.clearStatuses = function() {
  this.setStatuses(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.Links.prototype.hasStatuses = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.PullRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.PullRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.PullRequest.displayName = 'proto.github.PullRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.PullRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.github.PullRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.PullRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.PullRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    url: jspb.Message.getFieldWithDefault(msg, 2, ""),
    htmlUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    diffUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    patchUrl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    issueUrl: jspb.Message.getFieldWithDefault(msg, 6, ""),
    commitsUrl: jspb.Message.getFieldWithDefault(msg, 7, ""),
    reviewCommentsUrl: jspb.Message.getFieldWithDefault(msg, 8, ""),
    reviewCommentUrl: jspb.Message.getFieldWithDefault(msg, 9, ""),
    commentsUrl: jspb.Message.getFieldWithDefault(msg, 10, ""),
    statusesUrl: jspb.Message.getFieldWithDefault(msg, 11, ""),
    number: jspb.Message.getFieldWithDefault(msg, 12, 0),
    state: jspb.Message.getFieldWithDefault(msg, 13, ""),
    title: jspb.Message.getFieldWithDefault(msg, 14, ""),
    body: jspb.Message.getFieldWithDefault(msg, 15, ""),
    assignee: (f = msg.getAssignee()) && user_pb.User.toObject(includeInstance, f),
    milestone: (f = msg.getMilestone()) && milestone_pb.Milestone.toObject(includeInstance, f),
    locked: jspb.Message.getFieldWithDefault(msg, 18, false),
    createdAt: jspb.Message.getFieldWithDefault(msg, 19, ""),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 20, ""),
    closedAt: jspb.Message.getFieldWithDefault(msg, 21, ""),
    mergedAt: jspb.Message.getFieldWithDefault(msg, 22, ""),
    head: (f = msg.getHead()) && proto.github.RepositoryRef.toObject(includeInstance, f),
    base: (f = msg.getBase()) && proto.github.RepositoryRef.toObject(includeInstance, f),
    user: (f = msg.getUser()) && user_pb.User.toObject(includeInstance, f),
    mergeCommitSha: jspb.Message.getFieldWithDefault(msg, 26, ""),
    merged: jspb.Message.getFieldWithDefault(msg, 27, false),
    mergeable: jspb.Message.getFieldWithDefault(msg, 28, false),
    links: (f = msg.getLinks()) && proto.github.Links.toObject(includeInstance, f),
    mergedBy: (f = msg.getMergedBy()) && user_pb.User.toObject(includeInstance, f),
    comments: jspb.Message.getFieldWithDefault(msg, 31, 0),
    commits: jspb.Message.getFieldWithDefault(msg, 32, 0),
    additions: jspb.Message.getFieldWithDefault(msg, 33, 0),
    deletions: jspb.Message.getFieldWithDefault(msg, 34, 0),
    changedFiles: jspb.Message.getFieldWithDefault(msg, 35, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.PullRequest}
 */
proto.github.PullRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.PullRequest;
  return proto.github.PullRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.PullRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.PullRequest}
 */
proto.github.PullRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtmlUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDiffUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPatchUrl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssueUrl(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitsUrl(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setReviewCommentsUrl(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setReviewCommentUrl(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommentsUrl(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusesUrl(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumber(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 16:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setAssignee(value);
      break;
    case 17:
      var value = new milestone_pb.Milestone;
      reader.readMessage(value,milestone_pb.Milestone.deserializeBinaryFromReader);
      msg.setMilestone(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocked(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedAt(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setClosedAt(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setMergedAt(value);
      break;
    case 23:
      var value = new proto.github.RepositoryRef;
      reader.readMessage(value,proto.github.RepositoryRef.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 24:
      var value = new proto.github.RepositoryRef;
      reader.readMessage(value,proto.github.RepositoryRef.deserializeBinaryFromReader);
      msg.setBase(value);
      break;
    case 25:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 26:
      var value = /** @type {string} */ (reader.readString());
      msg.setMergeCommitSha(value);
      break;
    case 27:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMerged(value);
      break;
    case 28:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMergeable(value);
      break;
    case 29:
      var value = new proto.github.Links;
      reader.readMessage(value,proto.github.Links.deserializeBinaryFromReader);
      msg.setLinks(value);
      break;
    case 30:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setMergedBy(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setComments(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommits(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAdditions(value);
      break;
    case 34:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeletions(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChangedFiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.PullRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.PullRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.PullRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.PullRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getHtmlUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getDiffUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getPatchUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getIssueUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getCommitsUrl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getReviewCommentsUrl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getReviewCommentUrl();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getCommentsUrl();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getStatusesUrl();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getNumber();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = this.getState();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = this.getBody();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = this.getAssignee();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = this.getMilestone();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      milestone_pb.Milestone.serializeBinaryToWriter
    );
  }
  f = this.getLocked();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = this.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = this.getUpdatedAt();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = this.getClosedAt();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = this.getMergedAt();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = this.getHead();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.github.RepositoryRef.serializeBinaryToWriter
    );
  }
  f = this.getBase();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.github.RepositoryRef.serializeBinaryToWriter
    );
  }
  f = this.getUser();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = this.getMergeCommitSha();
  if (f.length > 0) {
    writer.writeString(
      26,
      f
    );
  }
  f = this.getMerged();
  if (f) {
    writer.writeBool(
      27,
      f
    );
  }
  f = this.getMergeable();
  if (f) {
    writer.writeBool(
      28,
      f
    );
  }
  f = this.getLinks();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.github.Links.serializeBinaryToWriter
    );
  }
  f = this.getMergedBy();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = this.getComments();
  if (f !== 0) {
    writer.writeInt32(
      31,
      f
    );
  }
  f = this.getCommits();
  if (f !== 0) {
    writer.writeInt32(
      32,
      f
    );
  }
  f = this.getAdditions();
  if (f !== 0) {
    writer.writeInt32(
      33,
      f
    );
  }
  f = this.getDeletions();
  if (f !== 0) {
    writer.writeInt32(
      34,
      f
    );
  }
  f = this.getChangedFiles();
  if (f !== 0) {
    writer.writeInt32(
      35,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.github.PullRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.github.PullRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.github.PullRequest.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.PullRequest.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string html_url = 3;
 * @return {string}
 */
proto.github.PullRequest.prototype.getHtmlUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.github.PullRequest.prototype.setHtmlUrl = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string diff_url = 4;
 * @return {string}
 */
proto.github.PullRequest.prototype.getDiffUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.github.PullRequest.prototype.setDiffUrl = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string patch_url = 5;
 * @return {string}
 */
proto.github.PullRequest.prototype.getPatchUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.github.PullRequest.prototype.setPatchUrl = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string issue_url = 6;
 * @return {string}
 */
proto.github.PullRequest.prototype.getIssueUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.github.PullRequest.prototype.setIssueUrl = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string commits_url = 7;
 * @return {string}
 */
proto.github.PullRequest.prototype.getCommitsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.github.PullRequest.prototype.setCommitsUrl = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string review_comments_url = 8;
 * @return {string}
 */
proto.github.PullRequest.prototype.getReviewCommentsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.github.PullRequest.prototype.setReviewCommentsUrl = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string review_comment_url = 9;
 * @return {string}
 */
proto.github.PullRequest.prototype.getReviewCommentUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.github.PullRequest.prototype.setReviewCommentUrl = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string comments_url = 10;
 * @return {string}
 */
proto.github.PullRequest.prototype.getCommentsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.github.PullRequest.prototype.setCommentsUrl = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string statuses_url = 11;
 * @return {string}
 */
proto.github.PullRequest.prototype.getStatusesUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.github.PullRequest.prototype.setStatusesUrl = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional int32 number = 12;
 * @return {number}
 */
proto.github.PullRequest.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.github.PullRequest.prototype.setNumber = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string state = 13;
 * @return {string}
 */
proto.github.PullRequest.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.github.PullRequest.prototype.setState = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string title = 14;
 * @return {string}
 */
proto.github.PullRequest.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.github.PullRequest.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string body = 15;
 * @return {string}
 */
proto.github.PullRequest.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.github.PullRequest.prototype.setBody = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional User assignee = 16;
 * @return {?proto.github.User}
 */
proto.github.PullRequest.prototype.getAssignee = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 16));
};


/** @param {?proto.github.User|undefined} value */
proto.github.PullRequest.prototype.setAssignee = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.github.PullRequest.prototype.clearAssignee = function() {
  this.setAssignee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.PullRequest.prototype.hasAssignee = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional Milestone milestone = 17;
 * @return {?proto.github.Milestone}
 */
proto.github.PullRequest.prototype.getMilestone = function() {
  return /** @type{?proto.github.Milestone} */ (
    jspb.Message.getWrapperField(this, milestone_pb.Milestone, 17));
};


/** @param {?proto.github.Milestone|undefined} value */
proto.github.PullRequest.prototype.setMilestone = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.github.PullRequest.prototype.clearMilestone = function() {
  this.setMilestone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.PullRequest.prototype.hasMilestone = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional bool locked = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.PullRequest.prototype.getLocked = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 18, false));
};


/** @param {boolean} value */
proto.github.PullRequest.prototype.setLocked = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional string created_at = 19;
 * @return {string}
 */
proto.github.PullRequest.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.github.PullRequest.prototype.setCreatedAt = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional string updated_at = 20;
 * @return {string}
 */
proto.github.PullRequest.prototype.getUpdatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.github.PullRequest.prototype.setUpdatedAt = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * optional string closed_at = 21;
 * @return {string}
 */
proto.github.PullRequest.prototype.getClosedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.github.PullRequest.prototype.setClosedAt = function(value) {
  jspb.Message.setField(this, 21, value);
};


/**
 * optional string merged_at = 22;
 * @return {string}
 */
proto.github.PullRequest.prototype.getMergedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/** @param {string} value */
proto.github.PullRequest.prototype.setMergedAt = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * optional RepositoryRef head = 23;
 * @return {?proto.github.RepositoryRef}
 */
proto.github.PullRequest.prototype.getHead = function() {
  return /** @type{?proto.github.RepositoryRef} */ (
    jspb.Message.getWrapperField(this, proto.github.RepositoryRef, 23));
};


/** @param {?proto.github.RepositoryRef|undefined} value */
proto.github.PullRequest.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 23, value);
};


proto.github.PullRequest.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.PullRequest.prototype.hasHead = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional RepositoryRef base = 24;
 * @return {?proto.github.RepositoryRef}
 */
proto.github.PullRequest.prototype.getBase = function() {
  return /** @type{?proto.github.RepositoryRef} */ (
    jspb.Message.getWrapperField(this, proto.github.RepositoryRef, 24));
};


/** @param {?proto.github.RepositoryRef|undefined} value */
proto.github.PullRequest.prototype.setBase = function(value) {
  jspb.Message.setWrapperField(this, 24, value);
};


proto.github.PullRequest.prototype.clearBase = function() {
  this.setBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.PullRequest.prototype.hasBase = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional User user = 25;
 * @return {?proto.github.User}
 */
proto.github.PullRequest.prototype.getUser = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 25));
};


/** @param {?proto.github.User|undefined} value */
proto.github.PullRequest.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 25, value);
};


proto.github.PullRequest.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.PullRequest.prototype.hasUser = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional string merge_commit_sha = 26;
 * @return {string}
 */
proto.github.PullRequest.prototype.getMergeCommitSha = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/** @param {string} value */
proto.github.PullRequest.prototype.setMergeCommitSha = function(value) {
  jspb.Message.setField(this, 26, value);
};


/**
 * optional bool merged = 27;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.PullRequest.prototype.getMerged = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 27, false));
};


/** @param {boolean} value */
proto.github.PullRequest.prototype.setMerged = function(value) {
  jspb.Message.setField(this, 27, value);
};


/**
 * optional bool mergeable = 28;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.github.PullRequest.prototype.getMergeable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 28, false));
};


/** @param {boolean} value */
proto.github.PullRequest.prototype.setMergeable = function(value) {
  jspb.Message.setField(this, 28, value);
};


/**
 * optional Links _links = 29;
 * @return {?proto.github.Links}
 */
proto.github.PullRequest.prototype.getLinks = function() {
  return /** @type{?proto.github.Links} */ (
    jspb.Message.getWrapperField(this, proto.github.Links, 29));
};


/** @param {?proto.github.Links|undefined} value */
proto.github.PullRequest.prototype.setLinks = function(value) {
  jspb.Message.setWrapperField(this, 29, value);
};


proto.github.PullRequest.prototype.clearLinks = function() {
  this.setLinks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.PullRequest.prototype.hasLinks = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional User merged_by = 30;
 * @return {?proto.github.User}
 */
proto.github.PullRequest.prototype.getMergedBy = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 30));
};


/** @param {?proto.github.User|undefined} value */
proto.github.PullRequest.prototype.setMergedBy = function(value) {
  jspb.Message.setWrapperField(this, 30, value);
};


proto.github.PullRequest.prototype.clearMergedBy = function() {
  this.setMergedBy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.PullRequest.prototype.hasMergedBy = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional int32 comments = 31;
 * @return {number}
 */
proto.github.PullRequest.prototype.getComments = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/** @param {number} value */
proto.github.PullRequest.prototype.setComments = function(value) {
  jspb.Message.setField(this, 31, value);
};


/**
 * optional int32 commits = 32;
 * @return {number}
 */
proto.github.PullRequest.prototype.getCommits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 32, 0));
};


/** @param {number} value */
proto.github.PullRequest.prototype.setCommits = function(value) {
  jspb.Message.setField(this, 32, value);
};


/**
 * optional int32 additions = 33;
 * @return {number}
 */
proto.github.PullRequest.prototype.getAdditions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 33, 0));
};


/** @param {number} value */
proto.github.PullRequest.prototype.setAdditions = function(value) {
  jspb.Message.setField(this, 33, value);
};


/**
 * optional int32 deletions = 34;
 * @return {number}
 */
proto.github.PullRequest.prototype.getDeletions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 34, 0));
};


/** @param {number} value */
proto.github.PullRequest.prototype.setDeletions = function(value) {
  jspb.Message.setField(this, 34, value);
};


/**
 * optional int32 changed_files = 35;
 * @return {number}
 */
proto.github.PullRequest.prototype.getChangedFiles = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 35, 0));
};


/** @param {number} value */
proto.github.PullRequest.prototype.setChangedFiles = function(value) {
  jspb.Message.setField(this, 35, value);
};


goog.object.extend(exports, proto.github);
