/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var user_pb = require('./user_pb.js');
var integration_installation_pb = require('./integration_installation_pb.js');
goog.exportSymbol('proto.github.InstallationRepo', null, global);
goog.exportSymbol('proto.github.IntegrationInstallationRepositories', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.InstallationRepo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.InstallationRepo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.InstallationRepo.displayName = 'proto.github.InstallationRepo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.InstallationRepo.prototype.toObject = function(opt_includeInstance) {
  return proto.github.InstallationRepo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.InstallationRepo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.InstallationRepo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fullName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.InstallationRepo}
 */
proto.github.InstallationRepo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.InstallationRepo;
  return proto.github.InstallationRepo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.InstallationRepo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.InstallationRepo}
 */
proto.github.InstallationRepo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.InstallationRepo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.InstallationRepo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.InstallationRepo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.InstallationRepo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getFullName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.github.InstallationRepo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.github.InstallationRepo.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.github.InstallationRepo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.github.InstallationRepo.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string full_name = 3;
 * @return {string}
 */
proto.github.InstallationRepo.prototype.getFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.github.InstallationRepo.prototype.setFullName = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.IntegrationInstallationRepositories = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.IntegrationInstallationRepositories.repeatedFields_, null);
};
goog.inherits(proto.github.IntegrationInstallationRepositories, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.github.IntegrationInstallationRepositories.displayName = 'proto.github.IntegrationInstallationRepositories';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.IntegrationInstallationRepositories.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.IntegrationInstallationRepositories.prototype.toObject = function(opt_includeInstance) {
  return proto.github.IntegrationInstallationRepositories.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.IntegrationInstallationRepositories} msg The msg instance to transform.
 * @return {!Object}
 */
proto.github.IntegrationInstallationRepositories.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, ""),
    installation: (f = msg.getInstallation()) && integration_installation_pb.Installation.toObject(includeInstance, f),
    repositorySelection: jspb.Message.getFieldWithDefault(msg, 3, ""),
    repositoriesAddedList: jspb.Message.toObjectList(msg.getRepositoriesAddedList(),
    proto.github.InstallationRepo.toObject, includeInstance),
    repositoriesRemovedList: jspb.Message.toObjectList(msg.getRepositoriesRemovedList(),
    proto.github.InstallationRepo.toObject, includeInstance),
    sender: (f = msg.getSender()) && user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.IntegrationInstallationRepositories}
 */
proto.github.IntegrationInstallationRepositories.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.IntegrationInstallationRepositories;
  return proto.github.IntegrationInstallationRepositories.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.IntegrationInstallationRepositories} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.IntegrationInstallationRepositories}
 */
proto.github.IntegrationInstallationRepositories.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 2:
      var value = new integration_installation_pb.Installation;
      reader.readMessage(value,integration_installation_pb.Installation.deserializeBinaryFromReader);
      msg.setInstallation(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRepositorySelection(value);
      break;
    case 4:
      var value = new proto.github.InstallationRepo;
      reader.readMessage(value,proto.github.InstallationRepo.deserializeBinaryFromReader);
      msg.addRepositoriesAdded(value);
      break;
    case 5:
      var value = new proto.github.InstallationRepo;
      reader.readMessage(value,proto.github.InstallationRepo.deserializeBinaryFromReader);
      msg.addRepositoriesRemoved(value);
      break;
    case 6:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.github.IntegrationInstallationRepositories} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.IntegrationInstallationRepositories.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.IntegrationInstallationRepositories.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.github.IntegrationInstallationRepositories.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getInstallation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      integration_installation_pb.Installation.serializeBinaryToWriter
    );
  }
  f = this.getRepositorySelection();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getRepositoriesAddedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.github.InstallationRepo.serializeBinaryToWriter
    );
  }
  f = this.getRepositoriesRemovedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.github.InstallationRepo.serializeBinaryToWriter
    );
  }
  f = this.getSender();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional string action = 1;
 * @return {string}
 */
proto.github.IntegrationInstallationRepositories.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.github.IntegrationInstallationRepositories.prototype.setAction = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Installation installation = 2;
 * @return {?proto.github.Installation}
 */
proto.github.IntegrationInstallationRepositories.prototype.getInstallation = function() {
  return /** @type{?proto.github.Installation} */ (
    jspb.Message.getWrapperField(this, integration_installation_pb.Installation, 2));
};


/** @param {?proto.github.Installation|undefined} value */
proto.github.IntegrationInstallationRepositories.prototype.setInstallation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.github.IntegrationInstallationRepositories.prototype.clearInstallation = function() {
  this.setInstallation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.IntegrationInstallationRepositories.prototype.hasInstallation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string repository_selection = 3;
 * @return {string}
 */
proto.github.IntegrationInstallationRepositories.prototype.getRepositorySelection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.github.IntegrationInstallationRepositories.prototype.setRepositorySelection = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated InstallationRepo repositories_added = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.github.InstallationRepo>}
 */
proto.github.IntegrationInstallationRepositories.prototype.getRepositoriesAddedList = function() {
  return /** @type{!Array.<!proto.github.InstallationRepo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.InstallationRepo, 4));
};


/** @param {!Array.<!proto.github.InstallationRepo>} value */
proto.github.IntegrationInstallationRepositories.prototype.setRepositoriesAddedList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.github.InstallationRepo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.InstallationRepo}
 */
proto.github.IntegrationInstallationRepositories.prototype.addRepositoriesAdded = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.github.InstallationRepo, opt_index);
};


proto.github.IntegrationInstallationRepositories.prototype.clearRepositoriesAddedList = function() {
  this.setRepositoriesAddedList([]);
};


/**
 * repeated InstallationRepo repositories_removed = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.github.InstallationRepo>}
 */
proto.github.IntegrationInstallationRepositories.prototype.getRepositoriesRemovedList = function() {
  return /** @type{!Array.<!proto.github.InstallationRepo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.InstallationRepo, 5));
};


/** @param {!Array.<!proto.github.InstallationRepo>} value */
proto.github.IntegrationInstallationRepositories.prototype.setRepositoriesRemovedList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.github.InstallationRepo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.InstallationRepo}
 */
proto.github.IntegrationInstallationRepositories.prototype.addRepositoriesRemoved = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.github.InstallationRepo, opt_index);
};


proto.github.IntegrationInstallationRepositories.prototype.clearRepositoriesRemovedList = function() {
  this.setRepositoriesRemovedList([]);
};


/**
 * optional User sender = 6;
 * @return {?proto.github.User}
 */
proto.github.IntegrationInstallationRepositories.prototype.getSender = function() {
  return /** @type{?proto.github.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 6));
};


/** @param {?proto.github.User|undefined} value */
proto.github.IntegrationInstallationRepositories.prototype.setSender = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.github.IntegrationInstallationRepositories.prototype.clearSender = function() {
  this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.github.IntegrationInstallationRepositories.prototype.hasSender = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto.github);


// patched by github-protobuf to add toJSON and fromJSON methods

function _toBool (obj) {
	if (typeof(obj) === 'boolean') { return obj; }
	if (typeof(obj) === 'string') { return obj === 'true'; }
	if (typeof(obj) === 'number') { return obj > 0; }
	return false;
};



// .github.InstallationRepo
proto.github.InstallationRepo.prototype.fromJSON = function(obj) {
	'id' in obj && this.setId(+obj.id);
	'name' in obj && this.setName(obj.name);
	'full_name' in obj && this.setFullName(obj.full_name);
	return this;
};

proto.github.InstallationRepo.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('id' in obj) {
		obj.id = obj.id;
		delete obj.id;
	}
	if ('name' in obj) {
		obj.name = obj.name;
		delete obj.name;
	}
	if ('fullName' in obj) {
		obj.full_name = obj.fullName;
		delete obj.fullName;
	}
	return obj;
};



// .github.IntegrationInstallationRepositories
proto.github.IntegrationInstallationRepositories.prototype.fromJSON = function(obj) {
	'action' in obj && this.setAction(obj.action);
	if ('installation' in obj) {
		var Installation = require('./integration_installation_pb.js').Installation;
		var InstallationInstance = new Installation();
		this.setInstallation(InstallationInstance.fromJSON(obj.installation));
	}
	'repository_selection' in obj && this.setRepositorySelection(obj.repository_selection);
	if ('repositories_added' in obj) {
		var InstallationRepo = require('./integration_installation_repositories_pb.js').InstallationRepo;
		var InstallationRepoInstance = new InstallationRepo();
		this.setRepositoriesAdded(InstallationRepoInstance.fromJSON(obj.repositories_added));
	}
	if ('repositories_removed' in obj) {
		var InstallationRepo = require('./integration_installation_repositories_pb.js').InstallationRepo;
		var InstallationRepoInstance = new InstallationRepo();
		this.setRepositoriesRemoved(InstallationRepoInstance.fromJSON(obj.repositories_removed));
	}
	if ('sender' in obj) {
		var User = require('./user_pb.js').User;
		var UserInstance = new User();
		this.setSender(UserInstance.fromJSON(obj.sender));
	}
	return this;
};

proto.github.IntegrationInstallationRepositories.prototype.toJSON = function() {
	var obj = this.toObject();
	if ('action' in obj) {
		obj.action = obj.action;
		delete obj.action;
	}
	if ('installation' in obj) {
		obj.installation = this.getInstallation().toJSON();
	}
	if ('repositorySelection' in obj) {
		obj.repository_selection = obj.repositorySelection;
		delete obj.repositorySelection;
	}
	if ('repositoriesAdded' in obj) {
		obj.repositories_added = this.getRepositoriesAdded().toJSON();
	}
	if ('repositoriesRemoved' in obj) {
		obj.repositories_removed = this.getRepositoriesRemoved().toJSON();
	}
	if ('sender' in obj) {
		obj.sender = this.getSender().toJSON();
	}
	return obj;
};

